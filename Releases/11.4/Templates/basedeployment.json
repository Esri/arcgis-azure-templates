{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "location": {
      "type": "string",
      "defaultValue": "eastus",
      "metadata": {
        "description": "Azure Region for the site deployment. All Resources provisioned are created here"
      }
    },
    "isMultiTier": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Indicates whether the deployment is a multi-tier deployment"
      }
    },
    "environment": {
      "type": "string",
      "defaultValue": "AzureCloud",
      "allowedValues": [
        "AzureCloud",
        "AzureGermanCloud",
        "AzureUSGovernment",
        "AzureChinaCloud"
      ],
      "metadata": {
        "description": "(Optional) Azure Environment for the deployment. E.g:- Public Azure, U.S. Gov. Cloud, Azure Germany, Azure China"
      }
    },
    "deploymentPrefix": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "(Optional) Prefix applied to all resources provisioned as part of this template"
      },
      "maxLength": 3
    },
    "usesPrivateIP": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "(Optional) Indicates whether Azure Files (SMB protocol) is used for the server config and portal content store"
      }
    },
    "deployPublicIPWhenUsingPrivateIP": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "(Optional) Deploys an unused public IP when using a Private Ip as Application Gateway V2 doesn't support only Private IP deployments yet."
      }
    },
    "usesExistingPublicIP": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "(Optional) Indicates whether to use existing Public IP is usesPrivateIP is false"
      }
    },
    "existingPublicIPResourceGroupName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Name of the Resource Group for the existing Public IP"
      }
    },
    "existingPublicIPName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Name of the existing Public IP"
      }
    },
    "dnsPrefixForPublicIpAddress": {
      "type": "string",
      "maxLength": 80,
      "defaultValue": "",
      "metadata": {
        "description": "DNS name for the Public IP address resource asociated with the site deployment. It needs to be unique across the region of deployment"
      }
    },
    "externalDnsHostName": {
      "type": "string",
      "metadata": {
        "description": "DNS name for the site deployment. It will be a custom domain (e.g. mysite.contoso.com) if using a Private IP or an SSL certificate, otherwise will be the Azure DNS <dnsPrefixForPublicIpAddress>.<location>.cloudapp.azure.com"
      }
    },
    "secondaryDnsHostName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Private DNS name for the site deployment. It will be a custom domain (e.g. mysite.contoso.com) if using a Private IP or an SSL certificate, otherwise will be the Azure DNS <dnsPrefixForPublicIpAddress>.<location>.cloudapp.azure.com"
      }
    },
    "sslCertificateFileName": {
      "type": "string",
      "metadata": {
        "description": "File name for the SSL Certificate"
      },
      "defaultValue": ""
    },
    "sslCertificateData": {
      "type": "string",
      "metadata": {
        "description": "Base-64 encoded form of the .pfx file. This is the cert terminating on the Application Gateway."
      },
      "defaultValue": ""
    },
    "sslCertificatePassword": {
      "type": "securestring",
      "metadata": {
        "description": "Password for .pfx certificate"
      },
      "defaultValue": ""
    },
    "publicKeySSLCertificateFileName": {
      "type": "string",
      "metadata": {
        "description": "File name for the Public Key SSL Certificate"
      },
      "defaultValue": ""
    },
    "useSelfSignedInternalSSLCertificate": {
      "type": "bool",
      "metadata": {
        "description": "Use Self Signed Internal Certificate"
      },
      "defaultValue": true
    },
    "selfSignedSSLCertificatePassword": {
      "type": "securestring",
      "metadata": {
        "description": "Private Key for the Backend Self signed SSL Certificate"
      },
      "defaultValue": ""
    },
    "serverInternalCertificateFileName": {
      "type": "string",
      "metadata": {
        "description": "File name for the SSL Certificate"
      },
      "defaultValue": ""
    },
    "serverInternalCertificatePassword": {
      "type": "securestring",
      "metadata": {
        "description": "Accessible file path for SSL Certificate"
      },
      "defaultValue": ""
    },
    "portalInternalCertificateFileName": {
      "type": "string",
      "metadata": {
        "description": "File name for the SSL Certificate"
      },
      "defaultValue": ""
    },
    "portalInternalCertificatePassword": {
      "type": "securestring",
      "metadata": {
        "description": "Accessible file path for SSL Certificate"
      },
      "defaultValue": ""
    },
    "virtualNetworkResourceGroupName": {
      "type": "string",
      "metadata": {
        "description": "Name of the Resource Group for the existing Virtual Network specified with the 'existingVirtualNetworkName' parameter"
      }
    },
    "existingVirtualNetworkName": {
      "type": "string",
      "metadata": {
        "description": "Name of the existing Virtual Network"
      }
    },
    "subnetName": {
      "type": "string",
      "metadata": {
        "description": "Name of the existing Subnet within the Virtual Network specified with the 'existingVirtualNetworkName' parameter"
      }
    },
    "outboundConnectivityMethod": {
      "type": "string",
      "defaultValue": "None",
      "allowedValues": [
        "None",
        "LoadBalancer",
        "NatGateway"
      ]
    },
    "natGatewayResourceGroup": {
      "type": "string",
      "defaultValue": ""
    },
    "natGatewayName": {
      "type": "string",
      "defaultValue": ""
    },
    "appGatewaySubnetName": {
      "type": "string",
      "metadata": {
        "description": "Name of the existing Subnet within the Virtual Network specified with the 'existingVirtualNetworkName' parameter"
      }
    },
    "isUpdatingCertificates": {
      "type": "bool",
      "metadata": {
        "description": "True if updating certificates of an existing deployment"
      },
      "defaultValue": false
    },
    "appGatewayPrivateIP": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Available IP address in Application Gateway Subnet Range to be used with external dns name"
      }
    },
    "appGatewayPrivateIPSubnet": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Subnet associated with Private IP"
      }
    },
    "appGatewayName": {
      "type": "string",
      "metadata": {
        "description": "Name of Application Gateway Resource"
      }
    },
    "appGatewayResourceGroupName": {
      "type": "string",
      "metadata": {
        "description": "Name of Application Gateway Resource Group Name"
      }
    },
    "windowsServerBaseImageReferenceVersion": {
      "type": "string",
      "metadata": {
        "description": "Windows Base Image reference version to be either used for RDP jump box or Fileshare Machine"
      },
      "defaultValue": "latest"
    },
    "userAssignedIdentities": {
      "type": "object",
      "defaultValue": {},
      "metadata": {
        "description": "User Assigned Identity"
      }
    },
    "adminUsername": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Username for the Virtual Machine Administrator (Windows) Account"
      }
    },
    "adminPassword": {
      "type": "securestring",
      "defaultValue": "",
      "metadata": {
        "description": "Password for the Virtual Machine Administrator (Windows) Account"
      }
    },
    "virtualMachines": {
      "type": "array",
      "metadata": {
        "description": "Array of Virtual Machines to be provisioned in the deployment"
      }
    },
    "virtualMachineNames": {
      "type": "string",
      "metadata": {
        "description": "Comma seperated list of names for the Virtual Machines with Portal, Server and DataStore. A maximum of 2 names may be specified for the single tier base deployment"
      }
    },
    "fileShareVirtualMachineName": {
      "type": "string",
      "metadata": {
        "description": "Name of the File Share Virtual Machine"
      },
      "defaultValue": "DummyFS"
    },
    "serverVirtualMachineNames": {
      "type": "string",
      "metadata": {
        "description": "Comma seperated list of virtual machine names for the Server Tier"
      },
      "defaultValue": ""
    },
    "portalVirtualMachineNames": {
      "type": "string",
      "metadata": {
        "description": "Comma seperated list of virtual machine names for the Portal Tier"
      },
      "defaultValue": ""
    },
    "dataStoreVirtualMachineNames": {
      "type": "string",
      "metadata": {
        "description": "Comma seperated list of virtual machine names for the Data Store Tier"
      },
      "defaultValue": ""
    },
    "spatiotemporalBigDataStoreVirtualMachineNames": {
      "type": "string",
      "metadata": {
        "description": "Comma seperated list of virtual machine names for the Spatiotemporal Big Data Store Tier"
      },
      "defaultValue": ""
    },
    "isTileCacheDataStoreClustered": {
      "type": "bool",
      "metadata": {
        "description": "TileCache Datastore architecture mode set to `cluster` if true, else `masterSlave`"
      },
      "defaultValue": false
    },
    "tileCacheDataStoreVirtualMachineNames": {
      "type": "string",
      "metadata": {
        "description": "Comma seperated list of virtual machine names for the Tile Cache Data Store Tier"
      },
      "defaultValue": ""
    },
    "graphDataStoreVirtualMachineNames": {
      "type": "string",
      "metadata": {
        "description": "Comma seperated list of virtual machine names for the Graph Data Store Tier"
      },
      "defaultValue": ""
    },
    "timeZoneId": {
      "type": "string",
      "defaultValue": "Pacific Standard Time",
      "metadata": {
        "description": "(Optional) Standard Id for the timezone to set for the Virtual Machines in the deployment"
      }
    },
    "enableAutomaticUpdates": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "(Optional) Indicates whether to enable Automatic (Windows) Operating System updates"
      }
    },
    "joinWindowsDomain": {
      "type": "bool",
      "metadata": {
        "description": "(Optional) Indicates whether the virtual machines should join an existing Windows Active Directory which provides domain join and DNS services in the Virtual Network"
      },
      "defaultValue": false
    },
    "windowsDomainName": {
      "type": "string",
      "metadata": {
        "description": "(Optional) Domain FQDN where the virtual machine will be joined. Required if joinWindowsDomain = true"
      },
      "defaultValue": ""
    },
    "windowsDomainAdministratorUserName": {
      "type": "string",
      "metadata": {
        "description": "(Optional) Username for the Active Directory Domain Administrator account where the virtual machine will be joined. Required if joinWindowsDomain = true"
      },
      "defaultValue": ""
    },
    "windowsDomainAdministratorPassword": {
      "type": "securestring",
      "metadata": {
        "description": "(Optional) Password for the Active Directory Domain Administrator account where the virtual machine will be joined. Required if joinWindowsDomain = true"
      },
      "defaultValue": ""
    },
    "logAnalyticsWorkspaceName": {
      "type": "string",
      "metadata": {
        "description": "Azure Monitor Logs workspace name"
      },
      "defaultValue": ""
    },
    "logAnalyticsWorkspaceResourceGroupName": {
      "type": "string",
      "metadata": {
        "description": "Azure Monitor Logs Workspace Resource Group Name"
      },
      "defaultValue": ""
    },
    "azureMonitoringAgentUserAssignedIdentityId": {
      "type": "string",
      "metadata": {
        "description": "Azure Monitoring Agent User Assigned Identity"
      },
      "defaultValue": ""
    },
    "azureMonitoringAgentUserAssignedIdentityClientId": {
      "type": "string",
      "metadata": {
        "description": "Azure Monitoring Agent User Assigned Identity"
      },
      "defaultValue": ""
    },
    "serverContext": {
      "type": "string",
      "metadata": {
        "description": "ArcGIS Server Site Context"
      },
      "defaultValue": "server"
    },
    "portalContext": {
      "type": "string",
      "metadata": {
        "description": "ArcGIS Portal Site Context"
      },
      "defaultValue": "portal"
    },
    "arcgisServiceAccountUserName": {
      "type": "string",
      "metadata": {
        "description": "User name for the ArcGIS (Windows) Service Account"
      },
      "defaultValue": "arcgis"
    },
    "arcgisServiceAccountPassword": {
      "type": "securestring",
      "metadata": {
        "description": "Password for the ArcGIS (Windows) Service Account"
      },
      "defaultValue": ""
    },
    "arcgisServiceAccountIsDomainAccount": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "(Optional) Indicates whether ArcGIS Service Account is a Domain Account."
      }
    },
    "primarySiteAdministratorAccountUserName": {
      "type": "string",
      "metadata": {
        "description": "User name for the ArcGIS Server Site Primary Site Administrator"
      },
      "defaultValue": "siteadmin"
    },
    "primarySiteAdministratorAccountPassword": {
      "type": "securestring",
      "metadata": {
        "description": "User name for the ArcGIS Server Site Primary Site Administrator"
      }
    },
    "serverLicenseFileName": {
      "type": "string",
      "metadata": {
        "description": "File name for the ArcGIS Server License"
      },
      "defaultValue": ""
    },
    "portalLicenseFileName": {
      "type": "string",
      "metadata": {
        "description": "File name for the Portal for ArcGIS License"
      },
      "defaultValue": ""
    },
    "portalLicenseUserTypeId": {
      "type": "string",
      "metadata": {
        "description": "Portal for ArcGIS License User Type Id to be used to Configure Portal Site"
      },
      "defaultValue": ""
    },
    "dataStoreTypes": {
      "type": "string",
      "defaultValue": "Relational",
      "metadata": {
        "description": "(Optional) The types of ArcGIS Data Stores that are enabled for this deployment"
      }
    },
    "dataStoreTypesForBaseDeploymentServers": {
      "type": "string",
      "defaultValue": "Relational",
      "metadata": {
        "description": "(Optional) The types of ArcGIS Data Stores that are enabled for this base deployment servers"
      }
    },
    "isMultiMachineTileCacheDataStore": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "(Optional) Indicates whether TileCache Datastore is a multi machine setup"
      }
    },
    "useCloudStorage": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "(Optional) Indicates whether Azure Storage is used for the server config and portal content store"
      }
    },
    "useAzureFiles": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "(Optional) Indicates whether Azure Files (SMB protocol) is used for the server config and portal content store"
      }
    },
    "usesFileShareVirtualMachine": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "(Optional) Indicates whether a File Share Virtual Machine is used for the server config and content store"
      }
    },
    "useExistingFileShare": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "(Optional) Indicates whether an existing File Share is used for the server config store"
      }
    },
    "fileSharePath": {
      "type": "string",
      "metadata": {
        "description": "(Optional) URI for the File Share used for the server config store."
      },
      "defaultValue": ""
    },
    "fileShareName": {
      "type": "string",
      "metadata": {
        "description": "(Optional) Name of the file share on the file share host"
      },
      "defaultValue": "fileshare"
    },
    "cloudStorageAccountName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "(Optional) Name of the Azure Storage Account used. Required if 'useCloudStorage' is set to true"
      }
    },
    "cloudStorageAccountResourceGroupName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "(Optional) Name of the resource group for the Azure Storage Account specified with 'cloudStorageAccountName'. Required if 'useCloudStorage' is set to true"
      }
    },
    "cloudStorageAccountKey": {
      "type": "securestring",
      "defaultValue": "",
      "metadata": {
        "description": "(Optional) Storage Account Access Key for the Azure Storage Account specified with 'cloudStorageAccountName'. Required if 'useCloudStorage' is set to true"
      }
    },
    "cloudStorageSASToken": {
      "type": "securestring",
      "defaultValue": "",
      "metadata": {
        "description": "(Optional)"
      }
    },
    "cloudStorageAuthenticationType": {
      "type": "string",
      "defaultValue": "AccessKey",
      "metadata": {
        "description": "(Optional) "
      }
    },
    "cloudStorageUserAssignedIdentityClientId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "(Optional) "
      }
    },
    "cloudStorageServicePrincipalTenantId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "(Optional) "
      }
    },
    "cloudStorageServicePrincipalAuthorityHost": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "(Optional) "
      }
    },
    "cloudStorageServicePrincipalClientId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "(Optional) "
      }
    },
    "cloudStorageServicePrincipalClientSecret": {
      "type": "securestring",
      "defaultValue": "",
      "metadata": {
        "description": "(Optional) "
      }
    },
    "cloudProvidedObjectStore": {
      "type": "secureObject",
      "defaultValue": {},
      "metadata": {
        "description": "(Optional) Azure Cloud Stores to be registered as cloud-provided Object Store on the ArcGIS Server"
      }
    },
    "cloudStores": {
      "type": "secureObject",
      "defaultValue": {},
      "metadata": {
        "description": "(Optional) Azure Cloud Stores to be registered as Data Items on the ArcGIS Server"
      }
    },
    "enableServerLogHarvesterPlugin": {
      "type": "bool",
      "metadata": {
        "description": "Enable Server Log Harvester Plugin "
      },
      "defaultValue": false
    },
    "databaseOption": {
      "type": "string",
      "defaultValue": "None",
      "allowedValues": [
        "None",
        "AzureSQLDatabase",
        "AzurePostgreSQLDatabase",
        "AzureFlexiblePostgreSQLDatabase",
        "SQLServerDatabase",
        "AzureMISQLDatabase"
      ],
      "metadata": {
        "description": "(Optional) Type of Database registed as an Enterprise Geodatabase"
      }
    },
    "databaseServerAdministratorAccountUserName": {
      "type": "string",
      "metadata": {
        "description": "User name for the Database Server administrator account"
      },
      "defaultValue": ""
    },
    "databaseServerAdministratorAccountPassword": {
      "type": "securestring",
      "metadata": {
        "description": "Password for the Database Server administrator account"
      },
      "defaultValue": ""
    },
    "databaseUserAccountUserName": {
      "type": "string",
      "metadata": {
        "description": "User name for the Database User account"
      },
      "defaultValue": ""
    },
    "databaseUserAccountPassword": {
      "type": "securestring",
      "metadata": {
        "description": "Password for the Database User account"
      },
      "defaultValue": ""
    },
    "databaseServerHostName": {
      "type": "string",
      "metadata": {
        "description": "Host name for the Database Server. E.g:- <myServer>.database.windows.net if SQL Database or <myServerFQDN> if SQL Server on IaaS VM"
      },
      "defaultValue": ""
    },
    "databaseName": {
      "type": "string",
      "metadata": {
        "description": "Name of the database"
      },
      "defaultValue": ""
    },
    "enableGeodatabase": {
      "type": "bool",
      "metadata": {
        "description": "Enable Geodatabase on Database to be registered"
      },
      "defaultValue": false
    },
    "_artifactsLocationSasToken": {
      "type": "securestring",
      "metadata": {
        "description": "(SAS) Shared Access Token for the deployment artifacts in an Azure Blob Storage Container"
      },
      "defaultValue": ""
    },
    "_artifactsLocation": {
      "type": "string",
      "metadata": {
        "description": "Fully qualified URL for the deployment artifacts location in an Azure Blob Storage Container"
      },
      "defaultValue": ""
    },
    "debugMode": {
      "type": "bool",
      "metadata": {
        "description": "(Optional) Indicates whether to enable debug settings on the site deployment. Used for troubleshooting only and should not be used for a Production Deployment"
      },
      "defaultValue": false
    },
    "enableRDPAccess": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "(Optional) Indicates whether Remote Desktop Access to the File Share Machine should be enabled."
      }
    },
    "enableAutoShutDown": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "(Optional) Indicates whether to enable auto shutdown at specified time."
      }
    },
    "autoShutDownTime": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "(Optional) Auto Shut down time in hh:ss format."
      }
    },
    "enableTrustedLaunch": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "(Optional) Indicates whether to enable Trusted Launch on the Virtual Machines"
      }
    },
    "secureBootEnabled": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "(Optional) Indicates whether to enable Secure Boot on the Virtual Machines"
      }
    },
    "vTpmEnabled": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "(Optional) Indicates whether to enable Virtual Trusted Platform Module (vTPM) on the Virtual Machines"
      }
    },
    "deploymentTimestamp": {
      "type": "string",
      "defaultValue": "[utcNow()]",
      "metadata": {
        "description": "An optional timestamp used to record as a tag which is used by ArcGIS Deployment Tools"
      }
    },
    "removeAndUninstallExtraArtifacts": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "(Optional) Remove exta artifacts staged or installed on ArcGIS Azure Marketplace images."
      }
    },
    "arcgisDeploymentVersion": {
      "type": "string",
      "metadata": {
        "description": "(Optional) Version number of the ArcGIS Software used in the deployment"
      },
      "defaultValue": "11.4"
    },
    "arcgisDeploymentId": {
      "type": "string",
      "metadata": {
        "description": "Deployment Id required in case of post deployment operations and optional in case of new deployments"
      },
      "defaultValue": ""
    },
    "deploymentTrackingID": {
      "type": "string",
      "metadata": {
        "description": "(Optional) deployment Tracking ID based on Orchestrator being Automation or Cloud Builder "
      },
      "defaultValue": "6c28be38-8e3c-4a14-a252-9ebf5bdec312"
    }
  },
  "variables": {
    "deploymentId": "[if(empty(parameters('arcgisDeploymentId')),uniqueString(resourceGroup().id, concat(parameters('serverContext'), parameters('location')), if(not(empty(parameters('secondaryDnsHostName'))),parameters('secondaryDnsHostName'),parameters('externalDnsHostName'))),parameters('arcgisDeploymentId'))]",
    "computeApiVersion": "2024-07-01",
    "networkApiVersion": "2023-11-01",
    "deploymentsApiVersion": "2024-03-01",
    
    "environmentToBlobEndpoint": {
      "AzureCloud": ".blob.core.windows.net",
      "AzureGermanCloud": ".blob.core.cloudapi.de",
      "AzureUSGovernment": ".blob.core.usgovcloudapi.net",
      "AzureChinaCloud": ".blob.core.chinacloudapi.cn"
    },
    "userAssignedIdentities": {
      "type": "UserAssigned",
      "userAssignedIdentities": "[parameters('userAssignedIdentities')]"
    },
    "publicIPAddressResourceName": "[if(parameters('usesExistingPublicIP'), parameters('existingPublicIPName'), concat(parameters('deploymentPrefix'), 'PublicIP'))]",
    "publicIPAddressRDPResourceName": "[concat(parameters('deploymentPrefix'), 'PublicIP-RDP')]",
    "publicIPAddressLBResourceName": "[concat(parameters('deploymentPrefix'), 'PublicIP-LB')]",
    "publicIPAddressResourceGroupName": "[if(parameters('usesExistingPublicIP'), parameters('existingPublicIPResourceGroupName'), resourceGroup().name)]",
    "unusedPublicIPPWhenUsingPrivateIPDnsPrefix": "[concat('ip',variables('deploymentId'),parameters('serverContext'))]",
    "unusedPublicIPWhenUsingPrivateIPResourceName": "[concat(variables('unusedPublicIPPWhenUsingPrivateIPDnsPrefix'),'UnusedPublicIP')]",
    "vnetID": "[resourceId(parameters('virtualNetworkResourceGroupName'), 'Microsoft.Network/virtualNetworks',parameters('existingVirtualNetworkName'))]",
    "subnetRef": "[concat(variables('vnetID'),'/subnets/',parameters('subnetName'))]",
    "appGatewaySubnetRef": "[concat(variables('vnetID'),'/subnets/',parameters('appGatewaySubnetName'))]",
    "nicName": "nic",
    "baseDeploymentAvailablitySetName": "[concat(parameters('deploymentPrefix'), 'AvailabilitySet-BaseDeployment')]",
    "frontendIPConfigurationsName": "[concat(parameters('deploymentPrefix'), 'EnterpriseAppGatewayFrontendIP')]",
    "publicIPFrontEndConfiguration": [
      {
        "name": "[variables('frontendIPConfigurationsName')]",
        "properties": {
          "PublicIPAddress": {
            "id": "[resourceId(variables('publicIPAddressResourceGroupName'),'Microsoft.Network/publicIPAddresses',variables('publicIPAddressResourceName'))]"
          }
        }
      }
    ],
    "privateIPFrontEndConfiguration": {
      "true": [
        {
          "name": "unusedAppGatewayFrontendPublicIP",
          "properties": {
            "PublicIPAddress": {
              "id": "[resourceId('Microsoft.Network/publicIPAddresses',variables('unusedPublicIPWhenUsingPrivateIPResourceName'))]"
            }
          }
        },
        {
          "name": "[variables('frontendIPConfigurationsName')]",
          "properties": {
            "privateIPAddress": "[parameters('appGatewayPrivateIP')]",
            "privateIPAllocationMethod": "Static",
            "subnet": {
              "id": "[resourceId(parameters('virtualNetworkResourceGroupName'),'Microsoft.Network/virtualNetworks/subnets', parameters('existingVirtualNetworkName'), parameters('appGatewayPrivateIPSubnet'))]"
            }
          }
        }
      ],
      "false": [
        {
          "name": "[variables('frontendIPConfigurationsName')]",
          "properties": {
            "privateIPAddress": "[parameters('appGatewayPrivateIP')]",
            "privateIPAllocationMethod": "Static",
            "subnet": {
              "id": "[resourceId(parameters('virtualNetworkResourceGroupName'),'Microsoft.Network/virtualNetworks/subnets', parameters('existingVirtualNetworkName'), parameters('appGatewayPrivateIPSubnet'))]"
            }
          }
        }
      ]
    },
    "frontendport443Name": "[concat(parameters('deploymentPrefix'), 'EnterprisePort443')]",
    "frontendport80Name": "[concat(parameters('deploymentPrefix'), 'EnterprisePort80')]",
    "httpDeploymentListnerName": "[concat(parameters('deploymentPrefix'), 'HttpEnterpriseDeploymentListner')]",
    "httpsDeploymentListnerName": "[concat(parameters('deploymentPrefix'), 'HttpsEnterpriseDeploymentListner')]",
    "urlPathMapsName": "[concat(parameters('deploymentPrefix'), 'EnterprisePathMap')]",
    "redirectConfigurationName": "[concat(parameters('deploymentPrefix'), 'EnterpriseHttpToHttps')]",
    "requestRoutingRule": "[concat(parameters('deploymentPrefix'), 'EnterpriseRequestRoutingRule')]",
    "httpToHttpsRequestRoutingRule": "[concat(parameters('deploymentPrefix'), 'HttpToHttpsEnterpriseRequestRoutingRule')]",
    "serverBackendPoolName": "[concat(parameters('deploymentPrefix'), 'ServerBackendPool')]",
    "portalBackendPoolName": "[concat(parameters('deploymentPrefix'), 'PortalBackendPool')]",
    "portalBackendHttpsSettingName": "[concat(parameters('deploymentPrefix'), 'PortalHttpsSetting')]",
    "serverBackendHttpsSettingName": "[concat(parameters('deploymentPrefix'), 'ServerHttpsSetting')]",
    "serverRewriteRuleSetName": "[concat(parameters('deploymentPrefix'), 'ServerRewriteRuleSet')]",
    "portalRewriteRuleSetName": "[concat(parameters('deploymentPrefix'), 'PortalRewriteRuleSet')]",
    "serverBackendProbeName": "[concat(parameters('deploymentPrefix'), 'ServerProbeName')]",
    "portalBackendProbeName": "[concat(parameters('deploymentPrefix'), 'PortalProbeName')]",
    "dscExtensionArchiveFileName": "DSC.zip",
    "dscScriptFunction": "BaseDeploymentSingleTierConfiguration",
    "tileCacheDataStoreDscScriptFunction": "TileCacheDataStoreConfiguration",
    "spatiotemporalBigDataStoreDscScriptFunction": "SpatiotemporalBigDataStoreConfiguration",
    "graphDataStoreDscScriptFunction": "GraphDataStoreConfiguration",
    "serverDscScriptFunction": "ServerConfiguration",
    "portalDscScriptFunction": "PortalConfiguration",
    "dataStoreDscScriptFunction": "DataStoreConfiguration",
    "fileShareDscScriptFunction": "FileShareConfiguration",
    "dataStoreTypes": "[split(parameters('dataStoreTypes'),',')]",
    "cloudStoreCredentialsPassword": {
      "AccessKey": "[parameters('cloudStorageAccountKey')]",
      "SASToken": "[parameters('cloudStorageSASToken')]",
      "ServicePrincipal": "placeholder",
      "UserAssignedIdentity": "placeholder"
    },
    "cloudStorageAccountCredentialsUserName": {
      "false": "placeholder",
      "true": "[concat(parameters('cloudStorageAccountName'),variables('environmentToBlobEndpoint')[parameters('environment')])]"
    },
    "cloudStorageOption": {
      "true": "[concat(substring(parameters('externalDnsHostName'), 0, indexOf(parameters('externalDnsHostName'),'.')), '@', parameters('cloudStorageAccountName'), variables('environmentToBlobEndpoint')[parameters('environment')], '@', parameters('cloudStorageAccountResourceGroupName'), '@',string(parameters('useAzureFiles')), '@', parameters('cloudStorageAuthenticationType'))]",
      "false": ""
    },
    "virtualMachineNames": "[split(parameters('virtualMachineNames'),',')]",
    "numberOfVirtualMachines": "[length(variables('virtualMachineNames'))]",

    "serverAvailablitySetName": "[concat(parameters('deploymentPrefix'), 'AvailabilitySet-Server')]",
    "serverVirtualMachineNamesAsCommaSeparatedString": "[if(parameters('isMultiTier'),parameters('serverVirtualMachineNames'), parameters('virtualMachineNames'))]",
    "serverVirtualMachineNames": "[split(variables('serverVirtualMachineNamesAsCommaSeparatedString'),',')]",
    "numberOfServerVirtualMachines": "[length(variables('serverVirtualMachineNames'))]",

    "portalAvailablitySetName": "[concat(parameters('deploymentPrefix'), 'AvailabilitySet-Portal')]",
    "portalVirtualMachineNamesAsCommaSeparatedString": "[if(parameters('isMultiTier'),parameters('portalVirtualMachineNames'), parameters('virtualMachineNames'))]",
    "portalVirtualMachineNames": "[split(variables('portalVirtualMachineNamesAsCommaSeparatedString'),',')]",
    "numberOfPortalVirtualMachines": "[length(variables('portalVirtualMachineNames'))]",

    "dataStoreAvailablitySetName": "[concat(parameters('deploymentPrefix'), 'AvailabilitySet-DataStore')]",
    "dataStoreVirtualMachineNames": "[split(if(parameters('isMultiTier'),parameters('dataStoreVirtualMachineNames'), parameters('virtualMachineNames')),',')]",
    "numberOfDataStoreVirtualMachines": "[length(variables('dataStoreVirtualMachineNames'))]",

    "enableSpatiotemporalBigDataStore": "[and(contains(parameters('dataStoreTypes'),'SpatioTemporal'),not(empty(parameters('spatiotemporalBigDataStoreVirtualMachineNames'))))]",
    "spatiotemporalBigDataStoreAvailablitySetName": "[concat(parameters('deploymentPrefix'), 'AvailabilitySet-SpatiotemporalDataStore')]",
    "spatiotemporalBigDataStoreVirtualMachineNames": "[split(parameters('spatiotemporalBigDataStoreVirtualMachineNames'),',')]",
    "numberOfSpatiotemporalBigDataStoreVirtualMachines": "[length(variables('spatiotemporalBigDataStoreVirtualMachineNames'))]",

    "enableTileCacheDataStore": "[and(contains(parameters('dataStoreTypes'),'TileCache'),not(empty(parameters('tileCacheDataStoreVirtualMachineNames'))))]",
    "tileCacheDataStoreAvailablitySetName": "[concat(parameters('deploymentPrefix'), 'AvailabilitySet-TileCacheDataStore')]",
    "tileCacheDataStoreVirtualMachineNames": "[split(parameters('tileCacheDataStoreVirtualMachineNames'),',')]",
    "numberOftileCacheDataStoreVirtualMachines": "[length(variables('tileCacheDataStoreVirtualMachineNames'))]",

    "enableGraphDataStore": "[contains(parameters('dataStoreTypes'),'GraphStore')]",
    "graphDataStoreAvailablitySetName": "[concat(parameters('deploymentPrefix'), 'AvailabilitySet-GraphDataStore')]",
    "graphDataStoreVirtualMachineNames": "[split(parameters('graphDataStoreVirtualMachineNames'),',')]",
    "numberOfGraphDataStoreVirtualMachines": "[length(variables('graphDataStoreVirtualMachineNames'))]",

    "AvailabilitySetNameForVM": {
      "TileCacheDataStore": "[variables('tileCacheDataStoreAvailablitySetName')]",
      "SpatiotemporalDataStore": "[variables('spatiotemporalBigDataStoreAvailablitySetName')]",
      "GraphDataStore": "[variables('graphDataStoreAvailablitySetName')]",
      "Server": "[variables('serverAvailablitySetName')]",
      "Portal": "[variables('portalAvailablitySetName')]",
      "DataStore": "[variables('dataStoreAvailablitySetName')]",
      "SQLServerDatabase": "[concat(parameters('deploymentPrefix'), 'AvailabilitySet-SQLServerDatabase')]"
    },
    "tileCacheDataStoreVirtualMachineNameOptions": {
      "true": "[variables('tileCacheDataStoreVirtualMachineNames')]",
      "false": [ "ta" ]
    },
    "graphDataStoreVirtualMachineNameOptions": {
      "true": "[variables('graphDataStoreVirtualMachineNames')]",
      "false": [ "ga" ]
    },
    "spatiotemporalBigDataStoreVirtualMachineNameOptions": {
      "true": "[variables('spatiotemporalBigDataStoreVirtualMachineNames')]",
      "false": [ "sa" ]
    },
    "loadBalancerName": "[concat(parameters('deploymentPrefix'), 'OutboundLoadBalancer')]",
    "frontendIPConfigName": "LbFrontend",
    "backendAddressPoolName": "LbBackendPool",
    "outboundRuleName": "lb-outbound-rule",
    "dataCollectionRuleName": "[concat(parameters('deploymentPrefix'), 'DataCollectionRule-',parameters('serverContext'))]",
    "dataCollectionEndpointName": "[concat(parameters('deploymentPrefix'), 'DataCollectionEndpoint-',parameters('serverContext'))]",
    "databaseServerAdministratorAccountUserName": {
      "true": "placeholder",
      "false": "[parameters('databaseServerAdministratorAccountUserName')]"
    },
    "databaseServerAdministratorAccountPassword": {
      "true": "placeholder",
      "false": "[parameters('databaseServerAdministratorAccountPassword')]"
    },
    "databaseUserAccountUserName": {
      "true": "placeholder",
      "false": "[parameters('databaseUserAccountUserName')]"
    },
    "databaseUserAccountPassword": {
      "true": "placeholder",
      "false": "[parameters('databaseUserAccountPassword')]"
    },
    "databaseServerHostName": {
      "None": "placeholder",
      "AzureSQLDatabase": "[parameters('databaseServerHostName')]",
      "AzurePostgreSQLDatabase": "[parameters('databaseServerHostName')]",
      "AzureFlexiblePostgreSQLDatabase": "[parameters('databaseServerHostName')]",
      "SQLServerDatabase": "[parameters('databaseServerHostName')]",
      "AzureMISQLDatabase": "[parameters('databaseServerHostName')]"
    },
    "sqlServerDscScriptFunction": "SQLServerConfiguration",
    "trustedLaunchSecurityProfile":{
      "true":{
        "uefiSettings": {
            "secureBootEnabled": "[parameters('secureBootEnabled')]",
            "vTpmEnabled": "[parameters('vTpmEnabled')]"
        },
        "securityType": "TrustedLaunch"
      },
      "false":{}
    }
  },
  "resources": [
    {
      "apiVersion": "[variables('deploymentsApiVersion')]",
      "name": "[concat('pid-',parameters('deploymentTrackingID'))]",
      "type": "Microsoft.Resources/deployments",
      "properties": {
        "mode": "Incremental",
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "resources": [
          ]
        }
      }
    },
    {
      "condition": "[parameters('enableRDPAccess')]",
      "type": "Microsoft.Network/publicIPAddresses",
      "name": "[variables('publicIPAddressRDPResourceName')]",
      "apiVersion": "[variables('networkApiVersion')]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "[if(equals(parameters('outboundConnectivityMethod'), 'None'), 'Basic', 'Standard')]"
      },
      "tags": {
        "displayName": "Public IP Address - RDP (Optional)",
        "arcgis-deployment-id": "[variables('deploymentId')]"
      },
      "scale": null,
      "properties": {
        "publicIPAllocationMethod": "[if(equals(parameters('outboundConnectivityMethod'), 'None'), 'Dynamic', 'Static')]",
        "idleTimeoutInMinutes": 4,
        "dnsSettings": {
          "domainNameLabel": "[concat(parameters('dnsPrefixForPublicIpAddress'),'-rdp')]"
        }
      }
    },
    {
      "condition": "[or(not(parameters('usesExistingPublicIP')),and(parameters('usesPrivateIP'),parameters('deployPublicIPWhenUsingPrivateIP')))]",
      "type": "Microsoft.Network/publicIPAddresses",
      "name": "[if(parameters('usesPrivateIP'),variables('unusedPublicIPWhenUsingPrivateIPResourceName'),variables('publicIPAddressResourceName'))]",
      "apiVersion": "[variables('networkApiVersion')]",
      "location": "[parameters('location')]",
      "tags": {
        "displayName": "Application Gateway Public IP Address",
        "arcgis-deployment-id": "[variables('deploymentId')]"
      },
      "sku": {
        "name": "Standard"
      },
      "scale": null,
      "properties": {
        "publicIPAllocationMethod": "Static",
        "idleTimeoutInMinutes": 11,
        "dnsSettings": {
          "domainNameLabel": "[if(parameters('usesPrivateIP'),variables('unusedPublicIPPWhenUsingPrivateIPDnsPrefix'),parameters('dnsPrefixForPublicIpAddress'))]"
        }
      },
      "dependsOn": [
      ]
    },
    {
      "condition": "[not(parameters('isMultiTier'))]",
      "apiVersion": "[variables('computeApiVersion')]",
      "type": "Microsoft.Compute/availabilitySets",
      "name": "[variables('baseDeploymentAvailablitySetName')]",
      "location": "[parameters('location')]",
      "tags": {
        "displayName": "Base Deployment Availability Set",
        "arcgis-deployment-id": "[variables('deploymentId')]"
      },
      "properties": {
        "platformUpdateDomainCount": 2,
        "platformFaultDomainCount": 2
      },
      "sku": {
        "name": "Aligned"
      }
    },
    {
      "condition": "[parameters('isMultiTier')]",
      "apiVersion": "[variables('computeApiVersion')]",
      "type": "Microsoft.Compute/availabilitySets",
      "name": "[variables('serverAvailablitySetName')]",
      "location": "[parameters('location')]",
      "tags": {
        "displayName": "Server Availability Set",
        "arcgis-deployment-id": "[variables('deploymentId')]"
      },
      "properties": {
        "platformUpdateDomainCount": 2,
        "platformFaultDomainCount": 2
      },
      "sku": {
        "name": "Aligned"
      }
    },
    {
      "condition": "[parameters('isMultiTier')]",
      "apiVersion": "[variables('computeApiVersion')]",
      "type": "Microsoft.Compute/availabilitySets",
      "name": "[variables('portalAvailablitySetName')]",
      "location": "[parameters('location')]",
      "tags": {
        "displayName": "Portal Availability Set",
        "arcgis-deployment-id": "[variables('deploymentId')]"
      },
      "properties": {
        "platformUpdateDomainCount": 2,
        "platformFaultDomainCount": 2
      },
      "sku": {
        "name": "Aligned"
      }
    },
    {
      "condition": "[parameters('isMultiTier')]",
      "apiVersion": "[variables('computeApiVersion')]",
      "type": "Microsoft.Compute/availabilitySets",
      "name": "[variables('dataStoreAvailablitySetName')]",
      "location": "[parameters('location')]",
      "tags": {
        "displayName": "DataStore Availability Set",
        "arcgis-deployment-id": "[variables('deploymentId')]"
      },
      "properties": {
        "platformUpdateDomainCount": 2,
        "platformFaultDomainCount": 2
      },
      "sku": {
        "name": "Aligned"
      }
    },
    {
      "condition": "[variables('enableSpatiotemporalBigDataStore')]",
      "apiVersion": "[variables('computeApiVersion')]",
      "type": "Microsoft.Compute/availabilitySets",
      "name": "[variables('spatiotemporalBigDataStoreAvailablitySetName')]",
      "location": "[parameters('location')]",
      "tags": {
        "displayName": "(Optional) Big Data Store Availability Set",
        "arcgis-deployment-id": "[variables('deploymentId')]"
      },
      "properties": {
        "platformUpdateDomainCount": 2,
        "platformFaultDomainCount": 2
      },
      "sku": {
        "name": "Aligned"
      }
    },
    {
      "condition": "[variables('enableGraphDataStore')]",
      "apiVersion": "[variables('computeApiVersion')]",
      "type": "Microsoft.Compute/availabilitySets",
      "name": "[variables('graphDataStoreAvailablitySetName')]",
      "location": "[parameters('location')]",
      "tags": {
        "displayName": "(Optional) Graph Store Availability Set",
        "arcgis-deployment-id": "[variables('deploymentId')]"
      },
      "properties": {
        "platformUpdateDomainCount": 2,
        "platformFaultDomainCount": 2
      },
      "sku": {
        "name": "Aligned"
      }
    },
    {
      "condition": "[variables('enableTileCacheDataStore')]",
      "apiVersion": "[variables('computeApiVersion')]",
      "type": "Microsoft.Compute/availabilitySets",
      "name": "[variables('tileCacheDataStoreAvailablitySetName')]",
      "location": "[parameters('location')]",
      "tags": {
        "displayName": "(Optional) Tile Cache Data Store Availability Set",
        "arcgis-deployment-id": "[variables('deploymentId')]"
      },
      "properties": {
        "platformUpdateDomainCount": 2,
        "platformFaultDomainCount": 2
      },
      "sku": {
        "name": "Aligned"
      }
    },
    {
      "apiVersion": "[variables('networkApiVersion')]",
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[concat(parameters('virtualMachines')[copyIndex()]['VMName'], '-', variables('nicName'))]",
      "location": "[parameters('location')]",
      "tags": {
        "displayName": "Network Interface",
        "arcgis-deployment-id": "[variables('deploymentId')]"
      },
      "copy": {
        "name": "nic-copy",
        "count": "[length(parameters('virtualMachines'))]"
      },
      "dependsOn": [
        "[variables('publicIPAddressRDPResourceName')]",
        "[resourceId('Microsoft.Network/loadBalancers', variables('loadBalancerName'))]"
      ],
      "properties": {
        "ipConfigurations": [
          {
            "name": "[if(and(parameters('enableRDPAccess'),equals(parameters('virtualMachines')[copyIndex()]['VMRoles'],'RDPJumpBox')),'jumpbox-ipconfig','ipconfig')]",
            "properties": {
              "privateIPAllocationMethod": "Dynamic",
              "subnet": {
                "id": "[variables('subnetRef')]"
              },
              "publicIPAddress": "[if(and(parameters('enableRDPAccess'),equals(parameters('virtualMachines')[copyIndex()]['VMRoles'],'RDPJumpBox')),json(concat('{\"id\":\"',resourceId('Microsoft.Network/publicIPAddresses',variables('publicIPAddressRDPResourceName')),'\"}')),json('null'))]",
              "loadBalancerBackendAddressPools": "[if(equals(parameters('virtualMachines')[copyIndex()]['VMRoles'],'RDPJumpBox'), json('null'), if(equals(parameters('outboundConnectivityMethod'), 'LoadBalancer'), json(concat('[{\"id\":\"', resourceId(parameters('appGatewayResourceGroupName'), 'Microsoft.Network/loadBalancers', variables('loadBalancerName')), '/backendAddressPools/', variables('backendAddressPoolName'),'\"}]')), json('null')))]"
            }
          }
        ]
      }
    },
    {
      "condition": "[not(empty(parameters('adminPassword')))]",
      "apiVersion": "[variables('computeApiVersion')]",
      "type": "Microsoft.Compute/virtualMachines",
      "name": "[parameters('virtualMachines')[copyIndex()]['VMName']]",
      "location": "[parameters('location')]",
      "identity": "[if(empty(parameters('userAssignedIdentities')),json('null'),variables('userAssignedIdentities'))]",
      "copy": {
        "name": "vm-copy",
        "count": "[length(parameters('virtualMachines'))]"
      },
      "tags": {
        "arcgis-vm-roles": "[parameters('virtualMachines')[copyIndex()]['VMRoles']]",
        "arcgis-deployment-id": "[variables('deploymentId')]",
        "displayName": "[concat(parameters('virtualMachines')[copyIndex()]['VMRoles'],' Virtual Machines')]"
      },
      "plan": "[if(and(equals(string(parameters('virtualMachines')[copyIndex()]['AzureVMImageType']),'0'),not(equals(parameters('virtualMachines')[copyIndex()]['ImageSpec']['Publisher'],'MicrosoftWindowsServer')),not(equals(parameters('virtualMachines')[copyIndex()]['ImageSpec']['Publisher'],'MicrosoftSQLServer'))),json(concat('{\"publisher\":\"',parameters('virtualMachines')[copyIndex()]['ImageSpec']['Publisher'],'\",\"product\":\"',parameters('virtualMachines')[copyIndex()]['ImageSpec']['Offer'],'\",\"name\":\"',parameters('virtualMachines')[copyIndex()]['ImageSpec']['SKU'],'\"}')),json('null'))]",
      "dependsOn": [
        "[concat('Microsoft.Network/networkInterfaces/', parameters('virtualMachines')[copyIndex()]['VMName'], '-', variables('nicName'))]",
        "[concat('Microsoft.Compute/availabilitySets/', variables('baseDeploymentAvailablitySetName'))]",
        "[concat('Microsoft.Compute/availabilitySets/', variables('serverAvailablitySetName'))]",
        "[concat('Microsoft.Compute/availabilitySets/', variables('portalAvailablitySetName'))]",
        "[concat('Microsoft.Compute/availabilitySets/', variables('dataStoreAvailablitySetName'))]",
        "[concat('Microsoft.Compute/availabilitySets/', variables('spatiotemporalBigDataStoreAvailablitySetName'))]",
        "[concat('Microsoft.Compute/availabilitySets/', variables('tileCacheDataStoreAvailablitySetName'))]",
        "[concat('Microsoft.Compute/availabilitySets/', variables('graphDataStoreAvailablitySetName'))]"
      ],
      "properties": {
        "availabilitySet": "[if(or(equals(parameters('virtualMachines')[copyIndex()]['VMRoles'],'RDPJumpBox'),equals(parameters('virtualMachines')[copyIndex()]['VMRoles'],'FileShare'),equals(parameters('virtualMachines')[copyIndex()]['VMRoles'],'SQLServer')),json('null'),json(concat('{\"id\":\"',resourceId('Microsoft.Compute/availabilitySets',if(and(contains(split(parameters('virtualMachines')[copyIndex()]['VMRoles'],','),'Server'),contains(split(parameters('virtualMachines')[copyIndex()]['VMRoles'],','),'Portal'),contains(split(parameters('virtualMachines')[copyIndex()]['VMRoles'],','),'DataStore')),variables('baseDeploymentAvailablitySetName'),variables('AvailabilitySetNameForVM')[parameters('virtualMachines')[copyIndex()]['VMRoles']])),'\"}')))]",
        "hardwareProfile": {
          "vmSize": "[parameters('virtualMachines')[copyIndex()]['VMSize']]"
        },
        "osProfile": {
          "computername": "[parameters('virtualMachines')[copyIndex()]['VMName']]",
          "adminUsername": "[parameters('adminUsername')]",
          "adminPassword": "[parameters('adminPassword')]",
          "windowsConfiguration": {
            "enableAutomaticUpdates": "[parameters('enableAutomaticUpdates')]",
            "timeZone": "[parameters('timeZoneId')]"
          }
        },
        "storageProfile": {
          "imageReference": "[if(equals(string(parameters('virtualMachines')[copyIndex()]['AzureVMImageType']),'0'),json(concat('{\"publisher\":\"',parameters('virtualMachines')[copyIndex()]['ImageSpec']['Publisher'],'\",\"offer\":\"',parameters('virtualMachines')[copyIndex()]['ImageSpec']['Offer'],'\",\"sku\":\"',parameters('virtualMachines')[copyIndex()]['ImageSpec']['SKU'],'\",\"version\":\"latest\"}')),if(equals(string(parameters('virtualMachines')[copyIndex()]['AzureVMImageType']),'1'),json(concat('{\"id\":\"',resourceid(string(parameters('virtualMachines')[copyIndex()]['ImageSpec']['UserImageResourceGroupName']),'Microsoft.Compute/images',parameters('virtualMachines')[copyIndex()]['ImageSpec']['UserImageName']),'\"}')),json(concat('{\"id\":\"',parameters('virtualMachines')[copyIndex()]['ImageSpec']['ComputeGalleryImageVersionResourceId'],'\"}'))))]",
          "osDisk": {
            "name": "[concat(parameters('virtualMachines')[copyIndex()]['VMName'],'-','OSDisk')]",
            "managedDisk": {
              "storageAccountType": "[parameters('virtualMachines')[copyIndex()]['OSDiskType']]"
            },
            "diskSizeGB": "[parameters('virtualMachines')[copyIndex()]['OSDiskSize']]",
            "caching": "[if(less(parameters('virtualMachines')[copyIndex()]['OSDiskSize'],4096),'ReadWrite','None')]",
            "createOption": "FromImage"
          },
          "dataDisks": "[if(equals(length(parameters('virtualMachines')[copyIndex()]['DataDisks']),0),json('null'),parameters('virtualMachines')[copyIndex()]['DataDisks'])]"
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces/', concat(parameters('virtualMachines')[copyIndex()]['VMName'], '-',variables('nicName')))]"
            }
          ]
        },
        "securityProfile": "[variables('trustedLaunchSecurityProfile')[string(parameters('enableTrustedLaunch'))]]"
      }
    },
    {
      "condition": "[parameters('enableAutoShutDown')]",
      "apiVersion": "2018-09-15",
      "type": "Microsoft.DevTestLab/schedules",
      "name": "[toLower(concat('shutdown-computevm-', parameters('virtualMachines')[copyIndex()]['VMName']))]",
      "location": "[parameters('location')]",
      "copy": {
        "name": "baseDeploymentServerAutoShutDownCopy",
        "count": "[length(parameters('virtualMachines'))]"
      },
      "dependsOn": [
        "vm-copy"
      ],
      "properties": {
        "status": "[if(parameters('enableAutoShutDown'),'Enabled','Disabled')]",
        "timeZoneId": "[parameters('timeZoneId')]",
        "taskType": "ComputeVmShutdownTask",
        "notificationSettings": {
          "status": "Disabled",
          "timeInMinutes": 15,
          "webhookUrl": ""
        },
        "targetResourceId": "[resourceId('Microsoft.Compute/virtualMachines/', parameters('virtualMachines')[copyIndex()]['VMName'])]",
        "dailyRecurrence": {
          "time": "[parameters('autoShutDownTime')]"
        }
      }
    },
    {
      "condition": "[parameters('joinWindowsDomain')]",
      "apiVersion": "[variables('computeApiVersion')]",
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "name": "[concat(parameters('virtualMachines')[copyIndex()]['VMName'],'/JoinDomain')]",
      "location": "[parameters('location')]",
      "copy": {
        "name": "vmDomainJoinCopy",
        "count": "[length(parameters('virtualMachines'))]"
      },
      "dependsOn": [
        "vm-copy"
      ],
      "tags": {
        "displayName": "(Optional) Base Deployment Server Domain Join"
      },
      "properties": {
        "publisher": "Microsoft.Compute",
        "type": "JsonADDomainExtension",
        "typeHandlerVersion": "1.3",
        "autoUpgradeMinorVersion": true,
        "settings": {
          "Name": "[parameters('windowsDomainName')]",
          "User": "[parameters('windowsDomainAdministratorUserName')]",
          "Restart": "true",
          "Options": 3
        },
        "protectedSettings": {
          "Password": "[parameters('windowsDomainAdministratorPassword')]"
        }
      }
    },
    {
      "condition": "[and(not(empty(parameters('logAnalyticsWorkspaceResourceGroupName'))),not(empty(parameters('logAnalyticsWorkspaceName'))))]",
      "apiVersion": "[variables('deploymentsApiVersion')]",
      "name": "[concat('setupmonitoring-',deployment().name)]",
      "type": "Microsoft.Resources/deployments",
      "dependsOn": [
        "vm-copy"
      ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(parameters('_artifactsLocation'),'/','setupmonitoring.json', parameters('_artifactsLocationSasToken'))]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "deploymentPrefix": {
            "value": "[parameters('deploymentPrefix')]"
          },
          "serverContext": {
            "value": "[parameters('serverContext')]"
          },
          "logAnalyticsWorkspaceName": {
            "value": "[parameters('logAnalyticsWorkspaceName')]"
          },
          "logAnalyticsWorkspaceResourceGroupName": {
            "value": "[parameters('logAnalyticsWorkspaceResourceGroupName')]"
          },
          "deploymentId": {
            "value": "[variables('deploymentId')]"
          }
        }
      }
    },
    {
      "condition": "[not(empty(parameters('azureMonitoringAgentUserAssignedIdentityId')))]",
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "name": "[concat(parameters('virtualMachines')[copyIndex()]['VMName'],'/AzureMonitorWindowsAgent')]",
      "location": "[parameters('location')]",
      "copy": {
        "name": "amaCopy",
        "count": "[length(parameters('virtualMachines'))]"
      },
      "apiVersion": "[variables('computeApiVersion')]",
      "dependsOn": [
        "vm-copy"
      ],
      "properties": {
        "publisher": "Microsoft.Azure.Monitor",
        "type": "AzureMonitorWindowsAgent",
        "typeHandlerVersion": "1.0",
        "autoUpgradeMinorVersion": true,
        "enableAutomaticUpgrade": true,
        "settings": {
          "authentication": {
            "managedIdentity": {
              "identifier-name": "mi_res_id",
              "identifier-value": "[parameters('azureMonitoringAgentUserAssignedIdentityId')]"
            }
          }
        }
      }
    },
    {
      "condition": "[and(not(empty(parameters('logAnalyticsWorkspaceResourceGroupName'))),not(empty(parameters('logAnalyticsWorkspaceName'))))]",
      "type": "Microsoft.Insights/dataCollectionRuleAssociations",
      "apiVersion": "2023-03-11",
      "name": "[concat(parameters('virtualMachines')[copyIndex()]['VMName'],'-DCRAssociation')]",
      "copy": {
        "name": "dcrAssociationCopy",
        "count": "[length(parameters('virtualMachines'))]"
      },
      "scope": "[format('Microsoft.Compute/virtualMachines/{0}', parameters('virtualMachines')[copyIndex()]['VMName'])]",
      "dependsOn": [
        "vm-copy",
        "[concat('setupmonitoring-',deployment().name)]"
      ],
      "properties": {
        "dataCollectionRuleId": "[resourceId('Microsoft.Insights/dataCollectionRules', variables('dataCollectionRuleName'))]",
        "description": "[format('Associating {0} VM', parameters('virtualMachines')[copyIndex()]['VMName'])]"
      }
    },
    {
      "name": "[concat('generateSSLCertificatesCustomExtension-',deployment().name)]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "[variables('deploymentsApiVersion')]",
      "dependsOn": [
        "vmDomainJoinCopy"
      ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(parameters('_artifactsLocation'),'/','generatecertificate-cse.json', parameters('_artifactsLocationSasToken'))]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "vmName": {
            "value": "[if(parameters('useExistingFileShare'), variables('serverVirtualMachineNames')[0], parameters('fileShareVirtualMachineName'))]"
          },
          "serverRole": {
            "value": "HostingServer"
          },
          "useSelfSignedInternalSSLCertificate": {
            "value": "[parameters('useSelfSignedInternalSSLCertificate')]"
          },
          "selfSignedSSLCertificatePassword": {
            "value": "[parameters('selfSignedSSLCertificatePassword')]"
          },
          "externalDnsHostName": {
            "value": "[parameters('externalDnsHostName')]"
          },
          "serverInternalCertificateFileName": {
            "value": "[parameters('serverInternalCertificateFileName')]"
          },
          "portalInternalCertificateFileName": {
            "value": "[parameters('portalInternalCertificateFileName')]"
          },
          "fileShareName": {
            "value": "[parameters('fileShareName')]"
          },
          "serverVirtualMachineNames": {
            "value": "[variables('serverVirtualMachineNamesAsCommaSeparatedString')]"
          },
          "portalVirtualMachineNames": {
            "value": "[variables('portalVirtualMachineNamesAsCommaSeparatedString')]"
          },
          "useExistingFileShare": {
            "value": "[parameters('useExistingFileShare')]"
          },
          "fileSharePath": {
            "value": "[parameters('fileSharePath')]"
          },
          "serverContext": {
            "value": "[parameters('serverContext')]"
          },
          "portalContext": {
            "value": "[parameters('portalContext')]"
          },
          "arcgisServiceAccountUserName": {
            "value": "[parameters('arcgisServiceAccountUserName')]"
          },
          "arcgisServiceAccountPassword": {
            "value": "[parameters('arcgisServiceAccountPassword')]"
          },
          "_artifactsLocation": {
            "value": "[parameters('_artifactsLocation')]"
          },
          "_artifactsLocationSasToken": {
            "value": "[parameters('_artifactsLocationSasToken')]"
          }
        }
      }
    },
    {
      "condition": "[parameters('enableRDPAccess')]",
      "apiVersion": "[variables('deploymentsApiVersion')]",
      "name": "[concat('fetchIpAddress-',deployment().name)]",
      "type": "Microsoft.Resources/deployments",
      "dependsOn": [
        "[concat('Microsoft.Network/publicIPAddresses/', variables('publicIPAddressLBResourceName'))]",
        "[concat('Microsoft.Network/publicIPAddresses/', variables('publicIPAddressRDPResourceName'))]",
        "vm-copy"
      ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(parameters('_artifactsLocation'),'/','fetchIpAddress.json', parameters('_artifactsLocationSasToken'))]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "publicIPAddressId": {
            "value": "[resourceId('Microsoft.Network/publicIpAddresses', variables('publicIPAddressRDPResourceName'))]"
          }
        }
      }
    },
    {
      "condition": "[and(not(empty(parameters('arcgisServiceAccountPassword'))),not(empty(parameters('sslCertificatePassword'))),or(not(empty(parameters('selfSignedSSLCertificatePassword'))),and(not(empty(parameters('serverInternalCertificatePassword'))),not(empty(parameters('portalInternalCertificatePassword'))))))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "[variables('deploymentsApiVersion')]",
      "name": "[concat('appGatewayNestedDeployment-',deployment().name)]",
      "resourceGroup": "[parameters('appGatewayResourceGroupName')]",
      "dependsOn": [
        "[concat('Microsoft.Resources/deployments/', 'fetchIpAddress-', deployment().name)]",
        "[concat('Microsoft.Resources/deployments/', 'generateSSLCertificatesCustomExtension-', deployment().name)]"
      ],
      "properties": {
        "mode": "Incremental",
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "parameters": {
          },
          "variables": {
          },
          "resources": [
            {
              "type": "Microsoft.Network/applicationGateways",
              "apiVersion": "2022-11-01",
              "name": "[parameters('appGatewayName')]",
              "location": "[parameters('location')]",
              "tags": APPGATEWAYTAGS,
              "properties": APPGATEWAYPROPERTIESOBJECT
            }
          ]
        },
        "parameters": {
        }
      }
    },
    {
      "condition": "[or(empty(parameters('arcgisServiceAccountPassword')), empty(parameters('sslCertificatePassword')), and(empty(parameters('selfSignedSSLCertificatePassword')), or(empty(parameters('serverInternalCertificatePassword')), empty(parameters('portalInternalCertificatePassword')))))]",
      "type": "Microsoft.Resources/tags",
      "apiVersion": "[variables('deploymentsApiVersion')]",
      "scope": "[resourceId(parameters('appGatewayResourceGroupName'), 'Microsoft.Network/applicationGateways', parameters('appGatewayName'))]",
      "name": "default",
      "dependsOn": [
        "[concat('Microsoft.Resources/deployments/', 'appGatewayNestedDeployment-',deployment().name)]"
      ],
      "properties": {
        "tags": APPGATEWAYTAGS
      }
    },
    {
      "condition": "[and(parameters('usesFileShareVirtualMachine'), not(empty(parameters('adminPassword'))))]",
      "name": "[concat(parameters('fileShareVirtualMachineName'),'/DSCConfigurationFS')]",
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "location": "[parameters('location')]",
      "tags": {
        "displayName": "File Share DSC Script"
      },
      "dependsOn": [
        "[concat('Microsoft.Resources/deployments/', 'generateSSLCertificatesCustomExtension-', deployment().name)]"
      ],
      "apiVersion": "[variables('computeApiVersion')]",
      "properties": {
        "publisher": "Microsoft.Powershell",
        "type": "DSC",
        "typeHandlerVersion": "2.77",
        "autoUpgradeMinorVersion": true,
        "settings": {
          "wmfVersion": "latest",
          "configuration": {
            "url": "[concat(parameters('_artifactsLocation'), '/', variables('dscExtensionArchiveFileName'))]",
            "function": "[variables('fileShareDscScriptFunction')]",
            "script": "[concat(variables('fileShareDscScriptFunction'), '.ps1')]"
          },
          "configurationArguments": {
            "ServiceCredentialIsDomainAccount": "[parameters('arcgisServiceAccountIsDomainAccount')]",
            "IsBaseDeployment": "True",
            "ExternalDNSHostName": "[parameters('externalDnsHostName')]",
            "PortalContext": "[parameters('portalContext')]",
            "FileShareName": "[parameters('fileShareName')]",
            "DebugMode": "[parameters('debugMode')]"
          }
        },
        "protectedSettings": {
          "configurationUrlSasToken": "[parameters('_artifactsLocationSasToken')]",
          "configurationArguments": {
            "ServiceCredential": {
              "userName": "[if(empty(parameters('arcgisServiceAccountUserName')),'PlaceHolder', parameters('arcgisServiceAccountUserName'))]",
              "password": "[if(empty(parameters('arcgisServiceAccountPassword')),'PlaceHolder', parameters('arcgisServiceAccountPassword'))]"
            },
            "MachineAdministratorCredential": {
              "userName": "[if(empty(parameters('adminUsername')),'PlaceHolder', parameters('adminUsername'))]",
              "password": "[if(empty(parameters('adminPassword')),'PlaceHolder', parameters('adminPassword'))]"
            }
          }
        }
      }
    },
    {
      "condition": "[not(parameters('isMultiTier'))]",
      "name": "[concat(variables('virtualMachineNames')[copyIndex()],'/DSCConfiguration')]",
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "location": "[parameters('location')]",
      "copy": {
        "name": "WebGIS-DSC-copy",
        "count": "[variables('numberOfVirtualMachines')]",
        "mode": "serial"
      },
      "tags": {
        "displayName": "DSC Script"
      },
      "dependsOn": [
        "[concat('Microsoft.Resources/deployments/', 'appGatewayNestedDeployment-',deployment().name)]",
        "[concat(resourceId('Microsoft.Compute/virtualMachines', concat(parameters('fileShareVirtualMachineName'))),'/extensions/DSCConfigurationFS')]",
        "[concat(resourceId('Microsoft.Compute/VirtualMachines', variables('databaseServerHostName')[parameters('databaseOption')]),'/extensions/SQLDSCConfiguration')]"
      ],
      "apiVersion": "[variables('computeApiVersion')]",
      "properties": {
        "publisher": "Microsoft.Powershell",
        "type": "DSC",
        "typeHandlerVersion": "2.77",
        "autoUpgradeMinorVersion": true,
        "settings": {
          "wmfVersion": "latest",
          "configuration": {
            "url": "[concat(parameters('_artifactsLocation'), '/', variables('dscExtensionArchiveFileName'))]",
            "function": "[variables('dscScriptFunction')]",
            "script": "[concat(variables('dscScriptFunction'), '.ps1')]"
          },
          "advancedOptions": {
            "forcePullAndApply": false
          },
          "configurationArguments": {
            "ServiceCredentialIsDomainAccount": "[parameters('arcgisServiceAccountIsDomainAccount')]",
            "PublicKeySSLCertificateFileUrl": "[if(empty(parameters('publicKeySSLCertificateFileName')), '', concat(parameters('_artifactsLocation'), '/', parameters('publicKeySSLCertificateFileName'), parameters('_artifactsLocationSasToken')))]",
            "ServerLicenseFileUrl": "[if(empty(parameters('serverLicenseFileName')), '', concat(parameters('_artifactsLocation'), '/', parameters('serverLicenseFileName'), parameters('_artifactsLocationSasToken')))]",
            "PortalLicenseFileUrl": "[if(empty(parameters('portalLicenseFileName')), '', concat(parameters('_artifactsLocation'), '/', parameters('portalLicenseFileName'), parameters('_artifactsLocationSasToken')))]",
            "PortalLicenseUserTypeId": "[if(empty(parameters('portalLicenseUserTypeId')),'',parameters('portalLicenseUserTypeId'))]",
            "MachineName": "[first(variables('virtualMachineNames'))]",
            "PeerMachineName": "[last(variables('virtualMachineNames'))]",
            "ExternalDNSHostName": "[parameters('externalDnsHostName')]",
            "PrivateDNSHostName": "[parameters('secondaryDnsHostName')]",
            "DataStoreTypes": "[parameters('dataStoreTypesForBaseDeploymentServers')]",
            "IsTileCacheDataStoreClustered": "[parameters('isTileCacheDataStoreClustered')]",
            "UseExistingFileShare": "[parameters('useExistingFileShare')]",
            "FileShareMachineName": "[parameters('fileShareVirtualMachineName')]",
            "FileShareName": "[parameters('fileShareName')]",
            "FileSharePath": "[parameters('fileSharePath')]",
            "UseCloudStorage": "[parameters('useCloudStorage')]",
            "UseAzureFiles": "[parameters('useAzureFiles')]",
            "EnableLogHarvesterPlugin": "[parameters('enableServerLogHarvesterPlugin')]",
            "DebugMode": "[parameters('debugMode')]",
            "ServerContext": "[parameters('serverContext')]",
            "PortalContext": "[parameters('portalContext')]",
            "IsUpdatingCertificates": "[parameters('isUpdatingCertificates')]",
            "CloudStorageAuthenticationType": "[parameters('cloudStorageAuthenticationType')]",
            "StorageAccountUserAssignedIdentityClientId": "[parameters('cloudStorageUserAssignedIdentityClientId')]",
            "StorageAccountServicePrincipalTenantId": "[parameters('cloudStorageServicePrincipalTenantId')]",
            "StorageAccountServicePrincipalAuthorityHost": "[parameters('cloudStorageServicePrincipalAuthorityHost')]",
            "DatabaseServerHostName": "[parameters('databaseServerHostName')]",
            "DatabaseName": "[parameters('databaseName')]",
            "DatabaseOption": "[parameters('databaseOption')]",
            "EnableGeodatabase": "[parameters('enableGeodatabase')]"
          }
        },
        "protectedSettings": {
          "configurationUrlSasToken": "[parameters('_artifactsLocationSasToken')]",
          "configurationArguments": {
            "ServiceCredential": {
              "userName": "[if(empty(parameters('arcgisServiceAccountUserName')),'PlaceHolder', parameters('arcgisServiceAccountUserName'))]",
              "password": "[if(empty(parameters('arcgisServiceAccountPassword')),'PlaceHolder', parameters('arcgisServiceAccountPassword'))]"
            },
            "MachineAdministratorCredential": {
              "userName": "[if(empty(parameters('adminUsername')),'PlaceHolder', parameters('adminUsername'))]",
              "password": "[if(empty(parameters('adminPassword')),'PlaceHolder', parameters('adminPassword'))]"
            },
            "ServerInternalCertificatePassword": {
              "userName": "Placeholder",
              "password": "[if(parameters('useSelfSignedInternalSSLCertificate'), parameters('selfSignedSSLCertificatePassword'), parameters('serverInternalCertificatePassword'))]"
            },
            "PortalInternalCertificatePassword": {
              "userName": "Placeholder",
              "password": "[if(parameters('useSelfSignedInternalSSLCertificate'), parameters('selfSignedSSLCertificatePassword'), parameters('portalInternalCertificatePassword'))]"
            },
            "SiteAdministratorCredential": {
              "userName": "[parameters('primarySiteAdministratorAccountUserName')]",
              "password": "[parameters('primarySiteAdministratorAccountPassword')]"
            },
            "StorageAccountCredential": {
              "userName": "[variables('cloudStorageAccountCredentialsUserName')[string(parameters('useCloudStorage'))]]",
              "password": "[if(parameters('useCloudStorage'), variables('cloudStoreCredentialsPassword')[parameters('cloudStorageAuthenticationType')],'placeholder')]"
            },
            "StorageAccountServicePrincipalCredential": {
              "userName": "[if(equals(parameters('cloudStorageAuthenticationType'),'ServicePrincipal'),parameters('cloudStorageServicePrincipalClientId'),'placeholder')]",
              "password": "[if(equals(parameters('cloudStorageAuthenticationType'),'ServicePrincipal'),parameters('cloudStorageServicePrincipalClientSecret'),'placeholder')]"
            },
            "DatabaseServerAdministratorCredential": {
              "userName": "[variables('databaseServerAdministratorAccountUserName')[string(equals(parameters('databaseOption'), 'None'))]]",
              "password": "[variables('databaseServerAdministratorAccountPassword')[string(equals(parameters('databaseOption'), 'None'))]]"
            },
            "DatabaseUserCredential": {
              "userName": "[variables('databaseUserAccountUserName')[string(equals(parameters('databaseOption'), 'None'))]]",
              "password": "[variables('databaseUserAccountPassword')[string(equals(parameters('databaseOption'), 'None'))]]"
            },
            "CloudStores": "[parameters('cloudStores')]",
            "CloudProvidedObjectStore": "[parameters('cloudProvidedObjectStore')]"
          }
        }
      }
    },
    {
      "condition": "[parameters('isMultiTier')]",
      "name": "[concat(variables('serverVirtualMachineNames')[copyIndex()],'/ServerDSCConfiguration')]",
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "location": "[parameters('location')]",
      "copy": {
        "name": "Server-DSC-copy",
        "count": "[variables('numberOfServerVirtualMachines')]",
        "mode": "Serial"
      },
      "tags": {
        "displayName": "Server DSC Scripts"
      },
      "dependsOn": [
        "[concat(resourceId('Microsoft.Compute/virtualMachines', concat(parameters('fileShareVirtualMachineName'))),'/extensions/DSCConfigurationFS')]",
        "[concat(resourceId('Microsoft.Compute/VirtualMachines', variables('databaseServerHostName')[parameters('databaseOption')]),'/extensions/SQLDSCConfiguration')]",
        "[concat('Microsoft.Resources/deployments/', 'appGatewayNestedDeployment-',deployment().name)]"
      ],
      "apiVersion": "[variables('computeApiVersion')]",
      "properties": {
        "publisher": "Microsoft.Powershell",
        "type": "DSC",
        "typeHandlerVersion": "2.77",
        "autoUpgradeMinorVersion": true,
        "settings": {
          "wmfVersion": "latest",
          "configuration": {
            "url": "[concat(parameters('_artifactsLocation'), '/', variables('dscExtensionArchiveFileName'))]",
            "function": "[variables('serverDscScriptFunction')]",
            "script": "[concat(variables('serverDscScriptFunction'), '.ps1')]"
          },
          "configurationArguments": {
            "ServiceCredentialIsDomainAccount": "[parameters('arcgisServiceAccountIsDomainAccount')]",
            "PublicKeySSLCertificateFileUrl": "[if(empty(parameters('publicKeySSLCertificateFileName')), '', concat(parameters('_artifactsLocation'), '/', parameters('publicKeySSLCertificateFileName'), parameters('_artifactsLocationSasToken')))]",
            "ServerLicenseFileUrl": "[if(empty(parameters('serverLicenseFileName')), '', concat(parameters('_artifactsLocation'), '/', parameters('serverLicenseFileName'), parameters('_artifactsLocationSasToken')))]",
            "ServerMachineNames": "[variables('serverVirtualMachineNamesAsCommaSeparatedString')]",
            "UseExistingFileShare": "[parameters('useExistingFileShare')]",
            "FileShareMachineName": "[parameters('fileShareVirtualMachineName')]",
            "FileShareName": "[parameters('fileShareName')]",
            "FileSharePath": "[parameters('fileSharePath')]",
            "ExternalDNSHostName": "[parameters('externalDnsHostName')]",
            "UseCloudStorage": "[parameters('useCloudStorage')]",
            "UseAzureFiles": "[parameters('useAzureFiles')]",
            "EnableLogHarvesterPlugin": "[parameters('enableServerLogHarvesterPlugin')]",
            "DebugMode": "[parameters('debugMode')]",
            "ServerContext": "[parameters('serverContext')]",
            "IsUpdatingCertificates": "[parameters('isUpdatingCertificates')]",
            "CloudStorageAuthenticationType": "[parameters('cloudStorageAuthenticationType')]",
            "StorageAccountUserAssignedIdentityClientId": "[parameters('cloudStorageUserAssignedIdentityClientId')]",
            "StorageAccountServicePrincipalTenantId": "[parameters('cloudStorageServicePrincipalTenantId')]",
            "StorageAccountServicePrincipalAuthorityHost": "[parameters('cloudStorageServicePrincipalAuthorityHost')]",
            "DatabaseServerHostName": "[parameters('databaseServerHostName')]",
            "DatabaseName": "[parameters('databaseName')]",
            "DatabaseOption": "[parameters('databaseOption')]",
            "EnableGeodatabase": "[parameters('enableGeodatabase')]"
          }
        },
        "protectedSettings": {
          "configurationUrlSasToken": "[parameters('_artifactsLocationSasToken')]",
          "configurationArguments": {
            "ServiceCredential": {
              "userName": "[if(empty(parameters('arcgisServiceAccountUserName')),'PlaceHolder', parameters('arcgisServiceAccountUserName'))]",
              "password": "[if(empty(parameters('arcgisServiceAccountPassword')),'PlaceHolder', parameters('arcgisServiceAccountPassword'))]"
            },
            "SiteAdministratorCredential": {
              "userName": "[parameters('primarySiteAdministratorAccountUserName')]",
              "password": "[parameters('primarySiteAdministratorAccountPassword')]"
            },
            "ServerInternalCertificatePassword": {
              "userName": "Placeholder",
              "password": "[if(parameters('useSelfSignedInternalSSLCertificate'), parameters('selfSignedSSLCertificatePassword'), parameters('serverInternalCertificatePassword'))]"
            },
            "StorageAccountCredential": {
              "userName": "[variables('cloudStorageAccountCredentialsUserName')[string(parameters('useCloudStorage'))]]",
              "password": "[if(parameters('useCloudStorage'), variables('cloudStoreCredentialsPassword')[parameters('cloudStorageAuthenticationType')],'placeholder')]"
            },
            "StorageAccountServicePrincipalCredential": {
              "userName": "[if(equals(parameters('cloudStorageAuthenticationType'),'ServicePrincipal'),parameters('cloudStorageServicePrincipalClientId'),'placeholder')]",
              "password": "[if(equals(parameters('cloudStorageAuthenticationType'),'ServicePrincipal'),parameters('cloudStorageServicePrincipalClientSecret'),'placeholder')]"
            },
            "DatabaseServerAdministratorCredential": {
              "userName": "[variables('databaseServerAdministratorAccountUserName')[string(equals(parameters('databaseOption'), 'None'))]]",
              "password": "[variables('databaseServerAdministratorAccountPassword')[string(equals(parameters('databaseOption'), 'None'))]]"
            },
            "DatabaseUserCredential": {
              "userName": "[variables('databaseUserAccountUserName')[string(equals(parameters('databaseOption'), 'None'))]]",
              "password": "[variables('databaseUserAccountPassword')[string(equals(parameters('databaseOption'), 'None'))]]"
            },
            "CloudStores": "[parameters('cloudStores')]",
            "CloudProvidedObjectStore": "[parameters('cloudProvidedObjectStore')]"
          }
        }
      }
    },
    {
      "condition": "[parameters('isMultiTier')]",
      "name": "[concat(variables('portalVirtualMachineNames')[copyIndex()],'/PortalDSCConfiguration')]",
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "location": "[parameters('location')]",
      "copy": {
        "name": "Portal-DSC-copy",
        "count": "[variables('numberOfPortalVirtualMachines')]",
        "mode": "serial"
      },
      "tags": {
        "displayName": "Portal DSC Scripts"
      },
      "dependsOn": [
        "[concat('Microsoft.Resources/deployments/', 'appGatewayNestedDeployment-',deployment().name)]",
        "[concat(resourceId('Microsoft.Compute/virtualMachines', concat(parameters('fileShareVirtualMachineName'))),'/extensions/DSCConfigurationFS')]",
        "Datastore-DSC-copy"
      ],
      "apiVersion": "[variables('computeApiVersion')]",
      "properties": {
        "publisher": "Microsoft.Powershell",
        "type": "DSC",
        "typeHandlerVersion": "2.77",
        "autoUpgradeMinorVersion": true,
        "settings": {
          "wmfVersion": "latest",
          "configuration": {
            "url": "[concat(parameters('_artifactsLocation'), '/', variables('dscExtensionArchiveFileName'))]",
            "function": "[variables('portalDscScriptFunction')]",
            "script": "[concat(variables('portalDscScriptFunction'), '.ps1')]"
          },
          "configurationArguments": {
            "ServiceCredentialIsDomainAccount": "[parameters('arcgisServiceAccountIsDomainAccount')]",
            "PublicKeySSLCertificateFileUrl": "[if(empty(parameters('publicKeySSLCertificateFileName')), '', concat(parameters('_artifactsLocation'), '/', parameters('publicKeySSLCertificateFileName'), parameters('_artifactsLocationSasToken')))]",
            "PortalLicenseFileUrl": "[if(empty(parameters('portalLicenseFileName')), '', concat(parameters('_artifactsLocation'), '/', parameters('portalLicenseFileName'), parameters('_artifactsLocationSasToken')))]",
            "PortalLicenseUserTypeId": "[if(empty(parameters('portalLicenseUserTypeId')),'',parameters('portalLicenseUserTypeId'))]",
            "ServerMachineNames": "[variables('serverVirtualMachineNamesAsCommaSeparatedString')]",
            "PortalMachineNames": "[variables('portalVirtualMachineNamesAsCommaSeparatedString')]",
            "UseExistingFileShare": "[parameters('useExistingFileShare')]",
            "FileShareMachineName": "[parameters('fileShareVirtualMachineName')]",
            "FileShareName": "[parameters('fileShareName')]",
            "FileSharePath": "[parameters('fileSharePath')]",
            "ExternalDNSHostName": "[parameters('externalDnsHostName')]",
            "PrivateDNSHostName": "[parameters('secondaryDnsHostName')]",
            "UseCloudStorage": "[parameters('useCloudStorage')]",
            "UseAzureFiles": "[parameters('useAzureFiles')]",
            "DebugMode": "[parameters('debugMode')]",
            "ServerContext": "[parameters('serverContext')]",
            "PortalContext": "[parameters('portalContext')]",
            "IsUpdatingCertificates": "[parameters('isUpdatingCertificates')]",
            "CloudStorageAuthenticationType": "[parameters('cloudStorageAuthenticationType')]",
            "StorageAccountUserAssignedIdentityClientId": "[parameters('cloudStorageUserAssignedIdentityClientId')]",
            "StorageAccountServicePrincipalTenantId": "[parameters('cloudStorageServicePrincipalTenantId')]",
            "StorageAccountServicePrincipalAuthorityHost": "[parameters('cloudStorageServicePrincipalAuthorityHost')]"
          }
        },
        "protectedSettings": {
          "configurationUrlSasToken": "[parameters('_artifactsLocationSasToken')]",
          "configurationArguments": {
            "ServiceCredential": {
              "userName": "[if(empty(parameters('arcgisServiceAccountUserName')),'PlaceHolder', parameters('arcgisServiceAccountUserName'))]",
              "password": "[if(empty(parameters('arcgisServiceAccountPassword')),'PlaceHolder', parameters('arcgisServiceAccountPassword'))]"
            },
            "SiteAdministratorCredential": {
              "userName": "[parameters('primarySiteAdministratorAccountUserName')]",
              "password": "[parameters('primarySiteAdministratorAccountPassword')]"
            },
            "PortalInternalCertificatePassword": {
              "userName": "Placeholder",
              "password": "[if(parameters('useSelfSignedInternalSSLCertificate'), parameters('selfSignedSSLCertificatePassword'), parameters('portalInternalCertificatePassword'))]"
            },
            "StorageAccountCredential": {
              "userName": "[variables('cloudStorageAccountCredentialsUserName')[string(parameters('useCloudStorage'))]]",
              "password": "[if(parameters('useCloudStorage'), variables('cloudStoreCredentialsPassword')[parameters('cloudStorageAuthenticationType')],'placeholder')]"
            },
            "StorageAccountServicePrincipalCredential": {
              "userName": "[if(equals(parameters('cloudStorageAuthenticationType'),'ServicePrincipal'),parameters('cloudStorageServicePrincipalClientId'),'placeholder')]",
              "password": "[if(equals(parameters('cloudStorageAuthenticationType'),'ServicePrincipal'),parameters('cloudStorageServicePrincipalClientSecret'),'placeholder')]"
            }
          }
        }
      }
    },
    {
      "condition": "[and(not(parameters('isUpdatingCertificates')),parameters('isMultiTier'))]",
      "name": "[concat(variables('dataStoreVirtualMachineNames')[copyIndex()],'/DataStoreDSCConfiguration')]",
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "location": "[parameters('location')]",
      "copy": {
        "name": "Datastore-DSC-copy",
        "count": "[variables('numberOfDataStoreVirtualMachines')]",
        "mode": "serial"
      },
      "tags": {
        "displayName": "Data Store DSC Scripts"
      },
      "dependsOn": [
        "[variables('dataStoreVirtualMachineNames')[copyIndex()]]",
        "[concat(resourceId('Microsoft.Compute/VirtualMachines', variables('dataStoreVirtualMachineNames')[copyIndex()]),'/extensions/JoinDomain')]",
        "Server-DSC-copy"
      ],
      "apiVersion": "[variables('computeApiVersion')]",
      "properties": {
        "publisher": "Microsoft.Powershell",
        "type": "DSC",
        "typeHandlerVersion": "2.77",
        "autoUpgradeMinorVersion": true,
        "settings": {
          "wmfVersion": "latest",
          "configuration": {
            "url": "[concat(parameters('_artifactsLocation'), '/', variables('dscExtensionArchiveFileName'))]",
            "function": "[variables('dataStoreDscScriptFunction')]",
            "script": "[concat(variables('dataStoreDscScriptFunction'), '.ps1')]"
          },
          "configurationArguments": {
            "ServiceCredentialIsDomainAccount": "[parameters('arcgisServiceAccountIsDomainAccount')]",
            "DataStoreMachineNames": "[parameters('dataStoreVirtualMachineNames')]",
            "UseExistingFileShare": "[parameters('useExistingFileShare')]",
            "FileShareMachineName": "[parameters('fileShareVirtualMachineName')]",
            "FileShareName": "[parameters('fileShareName')]",
            "FileSharePath": "[parameters('fileSharePath')]",
            "ServerMachineNames": "[variables('serverVirtualMachineNamesAsCommaSeparatedString')]",
            "ExternalDNSHostName": "[parameters('externalDnsHostName')]",
            "DebugMode": "[parameters('debugMode')]"
          }
        },
        "protectedSettings": {
          "configurationUrlSasToken": "[parameters('_artifactsLocationSasToken')]",
          "configurationArguments": {
            "ServiceCredential": {
              "userName": "[if(empty(parameters('arcgisServiceAccountUserName')),'PlaceHolder', parameters('arcgisServiceAccountUserName'))]",
              "password": "[if(empty(parameters('arcgisServiceAccountPassword')),'PlaceHolder', parameters('arcgisServiceAccountPassword'))]"
            },
            "SiteAdministratorCredential": {
              "userName": "[parameters('primarySiteAdministratorAccountUserName')]",
              "password": "[parameters('primarySiteAdministratorAccountPassword')]"
            }
          }
        }
      }
    },
    {
      "condition": "[and(not(parameters('isUpdatingCertificates')),variables('enableTileCacheDataStore'))]",
      "name": "[concat(variables('tileCacheDataStoreVirtualMachineNameOptions')[string(variables('enableTileCacheDataStore'))][copyIndex()],'/TileCacheDSCConfiguration')]",
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "location": "[parameters('location')]",
      "copy": {
        "name": "DSC-copy",
        "count": "[variables('numberOfTileCacheDataStoreVirtualMachines')]",
        "mode": "serial"
      },
      "tags": {
        "displayName": "(Optional) Tile Cache Data Store DSC Scripts"
      },
      "dependsOn": [
        "vmDomainJoinCopy",
        "WebGIS-DSC-copy",
        "Server-DSC-copy"
      ],
      "apiVersion": "[variables('computeApiVersion')]",
      "properties": {
        "publisher": "Microsoft.Powershell",
        "type": "DSC",
        "typeHandlerVersion": "2.77",
        "autoUpgradeMinorVersion": true,
        "settings": {
          "wmfVersion": "latest",
          "configuration": {
            "url": "[concat(parameters('_artifactsLocation'), '/', variables('dscExtensionArchiveFileName'))]",
            "function": "[variables('tileCacheDataStoreDscScriptFunction')]",
            "script": "[concat(variables('tileCacheDataStoreDscScriptFunction'), '.ps1')]"
          },
          "advancedOptions": {
            "forcePullAndApply": false
          },
          "configurationArguments": {
            "IsTileCacheDataStoreClustered": "[parameters('isTileCacheDataStoreClustered')]",
            "ServiceCredentialIsDomainAccount": "[parameters('arcgisServiceAccountIsDomainAccount')]",
            "TileCacheDataStoreMachineNames": "[parameters('tileCacheDataStoreVirtualMachineNames')]",
            "IsMultiMachineTileCache": "[parameters('isMultiMachineTileCacheDataStore')]",
            "UseExistingFileShare": "[parameters('useExistingFileShare')]",
            "FileShareMachineName": "[parameters('fileShareVirtualMachineName')]",
            "FileShareName": "[parameters('fileShareName')]",
            "FileSharePath": "[parameters('fileSharePath')]",
            "ServerMachineNames": "[variables('serverVirtualMachineNamesAsCommaSeparatedString')]",
            "DebugMode": "[parameters('debugMode')]"
          }
        },
        "protectedSettings": {
          "configurationUrlSasToken": "[parameters('_artifactsLocationSasToken')]",
          "configurationArguments": {
            "ServiceCredential": {
              "userName": "[if(empty(parameters('arcgisServiceAccountUserName')),'PlaceHolder', parameters('arcgisServiceAccountUserName'))]",
              "password": "[if(empty(parameters('arcgisServiceAccountPassword')),'PlaceHolder', parameters('arcgisServiceAccountPassword'))]"
            },
            "SiteAdministratorCredential": {
              "userName": "[parameters('primarySiteAdministratorAccountUserName')]",
              "password": "[parameters('primarySiteAdministratorAccountPassword')]"
            }
          }
        }
      }
    },
    {
      "condition": "[and(not(parameters('isUpdatingCertificates')),variables('enableSpatiotemporalBigDataStore'))]",
      "name": "[concat(variables('spatiotemporalBigDataStoreVirtualMachineNameOptions')[string(variables('enableSpatiotemporalBigDataStore'))][copyIndex()],'/SpatioTemporalDSCConfiguration')]",
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "location": "[parameters('location')]",
      "copy": {
        "name": "BDS-DSC-copy",
        "count": "[variables('numberOfSpatiotemporalBigDataStoreVirtualMachines')]",
        "mode": "serial"
      },
      "tags": {
        "displayName": "(Optional) Big Data Store DSC Scripts"
      },
      "dependsOn": [
        "vmDomainJoinCopy",
        "WebGIS-DSC-copy",
        "Server-DSC-copy"
      ],
      "apiVersion": "[variables('computeApiVersion')]",
      "properties": {
        "publisher": "Microsoft.Powershell",
        "type": "DSC",
        "typeHandlerVersion": "2.77",
        "autoUpgradeMinorVersion": true,
        "settings": {
          "wmfVersion": "latest",
          "configuration": {
            "url": "[concat(parameters('_artifactsLocation'), '/', variables('dscExtensionArchiveFileName'))]",
            "function": "[variables('spatiotemporalBigDataStoreDscScriptFunction')]",
            "script": "[concat(variables('spatiotemporalBigDataStoreDscScriptFunction'), '.ps1')]"
          },
          "configurationArguments": {
            "ServiceCredentialIsDomainAccount": "[parameters('arcgisServiceAccountIsDomainAccount')]",
            "SpatiotemporalBigDataStoreMachineNames": "[parameters('spatiotemporalBigDataStoreVirtualMachineNames')]",
            "UseExistingFileShare": "[parameters('useExistingFileShare')]",
            "FileShareMachineName": "[parameters('fileShareVirtualMachineName')]",
            "FileShareName": "[parameters('fileShareName')]",
            "FileSharePath": "[parameters('fileSharePath')]",
            "ServerMachineNames": "[variables('serverVirtualMachineNamesAsCommaSeparatedString')]",
            "DebugMode": "[parameters('debugMode')]"
          }
        },
        "protectedSettings": {
          "configurationUrlSasToken": "[parameters('_artifactsLocationSasToken')]",
          "configurationArguments": {
            "ServiceCredential": {
              "userName": "[if(empty(parameters('arcgisServiceAccountUserName')),'PlaceHolder', parameters('arcgisServiceAccountUserName'))]",
              "password": "[if(empty(parameters('arcgisServiceAccountPassword')),'PlaceHolder', parameters('arcgisServiceAccountPassword'))]"
            },
            "SiteAdministratorCredential": {
              "userName": "[parameters('primarySiteAdministratorAccountUserName')]",
              "password": "[parameters('primarySiteAdministratorAccountPassword')]"
            }
          }
        }
      }
    },
    {
      "condition": "[and(not(parameters('isUpdatingCertificates')),variables('enableGraphDataStore'))]",
      "name": "[concat(variables('graphDataStoreVirtualMachineNameOptions')[string(variables('enableGraphDataStore'))][copyIndex()],'/GraphStoreDSCConfiguration')]",
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "location": "[parameters('location')]",
      "copy": {
        "name": "DSC-copy",
        "count": "[variables('numberOfGraphDataStoreVirtualMachines')]",
        "mode": "serial"
      },
      "tags": {
        "displayName": "(Optional) Graph Data Store DSC Scripts"
      },
      "dependsOn": [
        "vmDomainJoinCopy",
        "WebGIS-DSC-copy",
        "Server-DSC-copy"
      ],
      "apiVersion": "[variables('computeApiVersion')]",
      "properties": {
        "publisher": "Microsoft.Powershell",
        "type": "DSC",
        "typeHandlerVersion": "2.77",
        "autoUpgradeMinorVersion": true,
        "settings": {
          "wmfVersion": "latest",
          "configuration": {
            "url": "[concat(parameters('_artifactsLocation'), '/', variables('dscExtensionArchiveFileName'))]",
            "function": "[variables('graphDataStoreDscScriptFunction')]",
            "script": "[concat(variables('graphDataStoreDscScriptFunction'), '.ps1')]"
          },
          "advancedOptions": {
            "forcePullAndApply": false
          },
          "configurationArguments": {
            "ServiceCredentialIsDomainAccount": "[parameters('arcgisServiceAccountIsDomainAccount')]",
            "GraphDataStoreMachineNames": "[parameters('graphDataStoreVirtualMachineNames')]",
            "UseExistingFileShare": "[parameters('useExistingFileShare')]",
            "FileShareMachineName": "[parameters('fileShareVirtualMachineName')]",
            "FileShareName": "[parameters('fileShareName')]",
            "FileSharePath": "[parameters('fileSharePath')]",
            "ServerMachineNames": "[variables('serverVirtualMachineNamesAsCommaSeparatedString')]",
            "DebugMode": "[parameters('debugMode')]"
          }
        },
        "protectedSettings": {
          "configurationUrlSasToken": "[parameters('_artifactsLocationSasToken')]",
          "configurationArguments": {
            "ServiceCredential": {
              "userName": "[if(empty(parameters('arcgisServiceAccountUserName')),'PlaceHolder', parameters('arcgisServiceAccountUserName'))]",
              "password": "[if(empty(parameters('arcgisServiceAccountPassword')),'PlaceHolder', parameters('arcgisServiceAccountPassword'))]"
            },
            "SiteAdministratorCredential": {
              "userName": "[parameters('primarySiteAdministratorAccountUserName')]",
              "password": "[parameters('primarySiteAdministratorAccountPassword')]"
            }
          }
        }
      }
    },
    {
      "condition": "[and(not(parameters('isUpdatingCertificates')),equals(string(parameters('databaseOption')), 'SQLServerDatabase'))]",
      "name": "[concat(variables('databaseServerHostName')[parameters('databaseOption')],'/SQLDSCConfiguration')]",
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "location": "[parameters('location')]",
      "tags": {
        "displayName": "(Optional) SQL Server DSC Scripts"
      },
      "dependsOn": [
        "vmDomainJoinCopy"
      ],
      "apiVersion": "[variables('computeApiVersion')]",
      "properties": {
        "publisher": "Microsoft.Powershell",
        "type": "DSC",
        "typeHandlerVersion": "2.77",
        "autoUpgradeMinorVersion": true,
        "settings": {
          "wmfVersion": "latest",
          "configuration": {
            "url": "[concat(parameters('_artifactsLocation'), '/', variables('dscExtensionArchiveFileName'))]",
            "function": "[variables('sqlServerDscScriptFunction')]",
            "script": "[concat(variables('sqlServerDscScriptFunction'), '.ps1')]"
          },
          "configurationArguments": {
          }
        },
        "protectedSettings": {
          "configurationUrlSasToken": "[parameters('_artifactsLocationSasToken')]",
          "configurationArguments": {
            "DatabaseAdminCredential": {
              "userName": "[variables('databaseServerAdministratorAccountUserName')[string(equals(parameters('databaseOption'), 'None'))]]",
              "password": "[variables('databaseServerAdministratorAccountPassword')[string(equals(parameters('databaseOption'), 'None'))]]"
            }
          }
        }
      }
    },
    {
      "condition": "[and(not(parameters('isUpdatingCertificates')),equals(parameters('outboundConnectivityMethod'), 'LoadBalancer'))]",
      "type": "Microsoft.Network/publicIPAddresses",
      "name": "[variables('publicIPAddressLBResourceName')]",
      "apiVersion": "[variables('networkApiVersion')]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "Standard"
      },
      "tags": {
        "displayName": "Public IP Address - LB",
        "arcgis-deployment-id": "[variables('deploymentId')]"
      },
      "scale": null,
      "properties": {
        "publicIPAllocationMethod": "Static",
        "idleTimeoutInMinutes": 4,
        "dnsSettings": {
          "domainNameLabel": "[concat(parameters('dnsPrefixForPublicIpAddress'), '-lb-', variables('deploymentId'))]"
        }
      }
    },
    {
      "condition": "[and(not(parameters('isUpdatingCertificates')),equals(parameters('outboundConnectivityMethod'), 'LoadBalancer'))]",
      "type": "Microsoft.Network/loadBalancers",
      "apiVersion": "[variables('networkApiVersion')]",
      "name": "[variables('loadBalancerName')]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "Standard"
      },
      "tags": {
        "displayName": "Load Balancer",
        "arcgis-deployment-id": "[variables('deploymentId')]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/publicIPAddresses', variables('publicIPAddressLBResourceName'))]"
      ],
      "properties": {
        "frontendIPConfigurations": [
          {
            "name": "[variables('frontendIPConfigName')]",
            "properties": {
              "publicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIPAddresses', variables('publicIPAddressLBResourceName'))]"
              }
            }
          }
        ],
        "backendAddressPools": [
          {
            "name": "[variables('backendAddressPoolName')]"
          }
        ],
        "outboundRules": [
          {
            "name": "[variables('outboundRuleName')]",
            "properties": {
              "frontendIPConfigurations": [
                {
                  "id": "[concat(resourceId(parameters('appGatewayResourceGroupName'), 'Microsoft.Network/loadBalancers', variables('loadBalancerName')), '/frontendIPConfigurations/', variables('frontendIPConfigName'))]"
                }
              ],
              "backendAddressPool": {
                "id": "[concat(resourceId(parameters('appGatewayResourceGroupName'), 'Microsoft.Network/loadBalancers', variables('loadBalancerName')), '/backendAddressPools/', variables('backendAddressPoolName'))]"
              },
              "protocol": "All",
              "idleTimeoutInMinutes": 4,
              "allocatedOutboundPorts": 1024
            }
          }
        ]
      }
    }
  ],
  "outputs": {
    "homeAppUrl": {
      "type": "string",
      "value": "[concat('https://', parameters('externalDnsHostName'))]"
    }
  }
}