{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "location": {
      "type": "string",
      "defaultValue": "eastus",
      "metadata": {
        "description": "Azure Region for the site deployment. All Resources provisioned are created here"
      }
    },
    "environment": {
      "type": "string",
      "defaultValue": "AzureCloud",
      "allowedValues": [
        "AzureCloud",
        "AzureGermanCloud",
        "AzureUSGovernment",
        "AzureChinaCloud"
      ],
      "metadata": {
        "description": "(Optional) Azure Environment for the deployment. E.g:- Public Azure, U.S. Gov. Cloud, Azure Germany, Azure China"
      }
    },
    "deploymentPrefix": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "(Optional) Prefix applied to all resources provisioned as part of this template"
      },
      "maxLength": 3
    },
    "usesPrivateIP": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "(Optional) Indicates front end IP of App Gateway is a private IP"
      }
    },
    "deployPublicIPWhenUsingPrivateIP": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "(Optional) Deploys an unused public IP when using a Private Ip as Application Gateway V2 doesn't support only Private IP deployments yet."
      }
    },
    "usesExistingPublicIP": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "(Optional) Indicates whether to use existing Public IP is usesPrivateIP is false"
      }
    },
    "existingPublicIPResourceGroupName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Name of the Resource Group for the existing Public IP"
      }
    },
    "existingPublicIPName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Name of the existing Public IP"
      }
    },
    "dnsPrefixForPublicIpAddress": {
      "type": "string",
      "maxLength": 80,
      "defaultValue": "",
      "metadata": {
        "description": "DNS name for the Public IP address resource asociated with the site deployment. It needs to be unique across the region of deployment"
      }
    },
    "externalDnsHostName": {
      "type": "string",
      "metadata": {
        "description": "DNS name for the site deployment. It will be a custom domain (e.g. mysite.contoso.com) if using a Private IP or SSL certificate , otherwise will be the Azure DNS <dnsPrefixForPublicIpAddress>.<location>.cloudapp.azure.com"
      }
    },
    "secondaryDnsHostName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Private DNS name for the site deployment. It will be a custom domain (e.g. mysite.contoso.com) if using a Private IP or an SSL certificate, otherwise will be the Azure DNS <dnsPrefixForPublicIpAddress>.<location>.cloudapp.azure.com"
      }
    },
    "sslCertificateFileName": {
      "type": "string",
      "metadata": {
        "description": "File name for the SSL Certificate"
      },
      "defaultValue": ""
    },
    "publicKeySSLCertificateFileName": {
      "type": "string",
      "metadata": {
        "description": "File name for the Public Key SSL Certificate"
      },
      "defaultValue": ""
    },
    "sslCertificateData": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Base-64 encoded form of the .pfx file. This is the cert terminating on the Application Gateway."
      }
    },
    "sslCertificatePassword": {
      "type": "securestring",
      "defaultValue": "",
      "metadata": {
        "description": "Password for .pfx certificate"
      }
    },
    "useSelfSignedInternalSSLCertificate": {
      "type": "bool",
      "metadata": {
        "description": "Use Self Signed Internal Certificate"
      },
      "defaultValue": true
    },
    "selfSignedSSLCertificatePassword": {
      "type": "securestring",
      "metadata": {
        "description": "Private Key for the Backend Self signed SSL Certificate"
      },
      "defaultValue": ""
    },
    "serverInternalCertificateFileName": {
      "type": "string",
      "metadata": {
        "description": "File name for the SSL Certificate"
      },
      "defaultValue": ""
    },
    "serverInternalCertificatePassword": {
      "type": "securestring",
      "metadata": {
        "description": "Accessible file path for SSL Certificate"
      },
      "defaultValue": ""
    },
    "virtualNetworkResourceGroupName": {
      "type": "string",
      "metadata": {
        "description": "Name of the Resource Group for the existing Virtual Network specified with the 'existingVirtualNetworkName' parameter"
      }
    },
    "existingVirtualNetworkName": {
      "type": "string",
      "metadata": {
        "description": "Name of the existing Virtual Network"
      }
    },
    "subnetName": {
      "type": "string",
      "metadata": {
        "description": "Name of the existing Subnet within the Virtual Network specified with the 'existingVirtualNetworkName' parameter"
      }
    },
    "appGatewaySubnetName": {
      "type": "string",
      "metadata": {
        "description": "Name of the existing Subnet within the Virtual Network specified with the 'existingVirtualNetworkName' parameter"
      }
    },
    "isAddingServersOrRegisterEGDB": {
      "type": "bool",
      "metadata": {
        "description": "True if adding machines or an egdb to an existing deployment"
      },
      "defaultValue": false
    },
    "isUpdatingCertificates": {
      "type": "bool",
      "metadata": {
        "description": "True if updating certificates of an existing deployment"
      },
      "defaultValue": false
    },
    "appGatewayPrivateIP": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Available IP address in Application Gateway Subnet Range to be used with external dns name"
      }
    },
    "appGatewayPrivateIPSubnet": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Subnet associated with Private IP"
      }
    },
    "appGatewayName": {
      "type": "string",
      "metadata": {
        "description": "Name of Application Gateway Resource"
      }
    },
    "appGatewayResourceGroupName": {
      "type": "string",
      "metadata": {
        "description": "Name of Application Gateway Resource Group Name"
      }
    },
    "windowsServerBaseImageReferenceVersion": {
      "type": "string",
      "metadata": {
        "description": "Windows Base Image reference version to be either used for RDP jump box or Fileshare Machine"
      },
      "defaultValue": "latest"
    },
    "imageReferences": {
      "type": "object",
      "metadata": {
        "description": "Details of ArcGIS marketplace image or User Images"
      }
    },
    "adminUsername": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Username for the Virtual Machine Administrator (Windows) Account"
      }
    },
    "adminPassword": {
      "type": "securestring",
      "defaultValue": "",
      "metadata": {
        "description": "Password for the Virtual Machine Administrator (Windows) Account"
      }
    },
    "userAssignedIdentities": {
      "type": "object",
      "defaultValue": {},
      "metadata": {
        "description": "User Assigned Identity"
      }
    },
    "virtualMachineNames": {
      "type": "string",
      "metadata": {
        "description": "Comma seperated list of names for the Virtual Machines. A maximum of 2 names may be specified for the single tier base deployment"
      }
    },
    "virtualMachineImageSpecs": {
      "type": "string",
      "metadata": {
        "description": "Comma seperated list of Image Type used refrencing useManagedDiskImage,userImageName,userImageResourceGroupName,imagePublisher,imageOffery and imageSKU by index"
      }
    },
    "virtualMachineSize": {
      "type": "string",
      "defaultValue": "Standard_DS3_v2",
      "metadata": {
        "description": "Machine size assigned to the the Virtual Machine(s)"
      }
    },
    "virtualMachineOSDiskType": {
      "type": "string",
      "defaultValue": "Premium_LRS",
      "allowedValues": [
        "Premium_LRS",
        "Standard_LRS",
        "StandardSSD_LRS",
        "UltraSSD_LRS"
      ],
      "metadata": {
        "description": "(Optional) Managed Disk Type for the Operating System (c Drive) Disk for the Virtual Machine(s)"
      }
    },
    "virtualMachineOSDiskSize": {
      "type": "int",
      "defaultValue": 128,
      "allowedValues": [
        64,
        128,
        256,
        512,
        1024,
        2048,
        4096,
        8192,
        16384,
        32767
      ],
      "metadata": {
        "description": "(Optional) Managed Disk Size for the Operating System (c Drive) Disk for the Virtual Machine(s)"
      }
    },
    "enableVirtualMachineDataDisk": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "(Optional) Indicates whether an additional Managed Disk is attached to the Virtual Machine(s)"
      }
    },
    "virtualMachineDataDiskNumber": {
      "type": "int",
      "defaultValue": 2,
      "metadata": {
        "description": "(Optional) Indicates whether Managed Disk number is attached to the Virtual Machine(s)"
      }
    },
    "virtualMachineDataDiskType": {
      "type": "string",
      "defaultValue": "Premium_LRS",
      "allowedValues": [
        "Premium_LRS",
        "Standard_LRS",
        "StandardSSD_LRS",
        "UltraSSD_LRS"
      ],
      "metadata": {
        "description": "(Optional) Managed disk type for the additional (Data) disk attached to the Virtual Machine(s)"
      }
    },
    "virtualMachineDataDiskSize": {
      "type": "int",
      "defaultValue": 32,
      "allowedValues": [
        32,
        64,
        128,
        256,
        512,
        1024,
        2048,
        4096,
        8192,
        16384,
        32767
      ],
      "metadata": {
        "description": "(Optional) Managed disk size for the additional (Data) disk attached to the Virtual Machine(s)"
      }
    },
    "timeZoneId": {
      "type": "string",
      "defaultValue": "Pacific Standard Time",
      "metadata": {
        "description": "(Optional) Standard Id for the timezone to set for the Virtual Machines in the deployment"
      }
    },
    "enableAutomaticUpdates": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "(Optional) Indicates whether to enable Automatic (Windows) Operating System updates"
      }
    },
    "joinWindowsDomain": {
      "type": "bool",
      "metadata": {
        "description": "(Optional) Indicates whether the virtual machines should join an existing Windows Active Directory which provides domain join and DNS services in the Virtual Network"
      },
      "defaultValue": false
    },
    "windowsDomainName": {
      "type": "string",
      "metadata": {
        "description": "(Optional) Domain FQDN where the virtual machine will be joined. Required if joinWindowsDomain = true"
      },
      "defaultValue": ""
    },
    "windowsDomainAdministratorUserName": {
      "type": "string",
      "metadata": {
        "description": "(Optional) Username for the Active Directory Domain Administrator account where the virtual machine will be joined. Required if joinWindowsDomain = true"
      },
      "defaultValue": ""
    },
    "windowsDomainAdministratorPassword": {
      "type": "securestring",
      "metadata": {
        "description": "(Optional) Password for the Active Directory Domain Administrator account where the virtual machine will be joined. Required if joinWindowsDomain = true"
      },
      "defaultValue": ""
    },
    "omsWorkspaceName": {
      "type": "string",
      "metadata": {
        "description": "Azure Monitor Logs workspace name"
      },
      "defaultValue": ""
    },
    "omsWorkspaceResourceGroupName": {
      "type": "string",
      "metadata": {
        "description": "Azure Monitor Logs Workspace Resource Group Name"
      },
      "defaultValue": ""
    },
    "serverContext": {
      "type": "string",
      "metadata": {
        "description": "ArcGIS Server Site Context"
      }
    },
    "geoeventServerContext": {
      "type": "string",
      "metadata": {
        "description": "ArcGIS Server Site Context"
      },
      "defaultValue": ""
    },
    "arcgisServiceAccountUserName": {
      "type": "string",
      "metadata": {
        "description": "User name for the ArcGIS (Windows) Service Account"
      },
      "defaultValue": "arcgis"
    },
    "arcgisServiceAccountPassword": {
      "type": "securestring",
      "metadata": {
        "description": "Password for the ArcGIS (Windows) Service Account"
      },
      "defaultValue": ""
    },
    "arcgisServiceAccountIsDomainAccount": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "(Optional) Indicates whether ArcGIS Service Account is a Domain Account."
      }
    },
    "primarySiteAdministratorAccountUserName": {
      "type": "string",
      "metadata": {
        "description": "User name for the ArcGIS Server Site Primary Site Administrator"
      },
      "defaultValue": "siteadmin"
    },
    "primarySiteAdministratorAccountPassword": {
      "type": "securestring",
      "metadata": {
        "description": "User name for the ArcGIS Server Site Primary Site Administrator"
      }
    },
    "serverLicenseFileName": {
      "type": "string",
      "metadata": {
        "description": "File name for the ArcGIS Server License"
      },
      "defaultValue": ""
    },
    "useCloudStorage": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "(Optional) Indicates whether Azure Storage is used for the server config and portal content store"
      }
    },
    "useAzureFiles": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "(Optional) Indicates whether Azure Files (SMB protocol) is used for the server config and portal content store"
      }
    },
    "fileShareName": {
      "type": "string",
      "metadata": {
        "description": "(Optional) Name of the file share on the file share host"
      },
      "defaultValue": "fileshare"
    },
    "cloudStorageAccountName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "(Optional) Name of the Azure Storage Account used. Required if 'useCloudStorage' is set to true"
      }
    },
    "cloudStorageAccountResourceGroupName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "(Optional) Name of the resource group for the Azure Storage Account specified with 'cloudStorageAccountName'. Required if 'useCloudStorage' is set to true"
      }
    },
    "cloudStorageAccountKey": {
      "type": "securestring",
      "defaultValue": "",
      "metadata": {
        "description": "(Optional) Storage Account Access Key for the Azure Storage Account specified with 'cloudStorageAccountName'. Required if 'useCloudStorage' is set to true"
      }
    },

    "cloudStorageSASToken": {
      "type": "securestring",
      "defaultValue": "",
      "metadata": {
        "description": "(Optional)"
      }
    },
    "cloudStorageAuthenticationType": {
      "type": "string",
      "defaultValue": "AccessKey",
      "metadata": {
        "description": "(Optional) "
      }
    },
    "cloudStorageUserAssignedIdentityClientId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "(Optional) "
      }
    },
    "cloudStorageServicePrincipalTenantId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "(Optional) "
      }
    },
    "cloudStorageServicePrincipalAuthorityHost": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "(Optional) "
      }
    },
    "cloudStorageServicePrincipalClientId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "(Optional) "
      }
    },
    "cloudStorageServicePrincipalClientSecret": {
      "type": "securestring",
      "defaultValue": "",
      "metadata": {
        "description": "(Optional) "
      }
    },
    "cloudStores": {
      "type": "secureObject",
      "defaultValue": {
      },
      "metadata": {
        "description": "(Optional) Azure Cloud Stores to be registered as Data Items on the ArcGIS Server"
      }
    },
    "enableServerLogHarvesterPlugin": {
      "type": "bool",
      "metadata": {
        "description": "Enable Server Log Harvester Plugin "
      },
      "defaultValue": false
    },
    "federateSite": {
      "type": "bool",
      "metadata": {
        "description": "(Optional) Whether to federate the site with an Enterprise Portal."
      },
      "defaultValue": false
    },
    "serverRole": {
      "type": "string",
      "defaultValue": "GeneralPurposeServer",
      "allowedValues": [
        "GeneralPurposeServer",
        "GeoEventServer",
        "GeoAnalyticsServer",
        "ImageServer",
        "NotebookServer",
        "MissionServer",
        "KnowledgeServer",
        "WorkflowManagerServer"
      ],
      "metadata": {
        "description": "(Optional) Server Role (or Function) for this Site deployment"
      }
    },
    "serverFunctions": {
      "type": "string",
      "metadata": {
        "description": "(Optional) Comma seperate list of Server Role (functions). Allowed Values are GeoAnalytics, RasterAnalytics, ImageHosting, NotebookServer, MissionServer"
      },
      "defaultValue": "GeneralPurposeServer"
    },
    "federatedSiteDeploymentId": {
      "type": "string",
      "metadata": {
        "description": "(Optional) Deployment Id for the site to which this site is federated to"
      },
      "defaultValue": ""
    },
    "federatedSitePortalContext": {
      "type": "string",
      "metadata": {
        "description": "ArcGIS Portal Site Context of Enterprise Portal (used to federate)"
      },
      "defaultValue": "portal"
    },
    "portalSiteAdministratorAccountUserName": {
      "type": "string",
      "metadata": {
        "description": "(Optional) User name for the Primary Site Administrator account of the Enterprise Portal (used to federate)"
      },
      "defaultValue": ""
    },
    "portalSiteAdministratorAccountPassword": {
      "type": "securestring",
      "metadata": {
        "description": "(Optional) Password for the Primary Site Administrator account of the Enterprise Portal (used to federate)"
      },
      "defaultValue": ""
    },
    "gisServerMachineNamesOnHostingServer": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "(Optional) Comma seperated list of GIS Server machine names from the hosting server"
      }
    },
    "portalMachineNamesOnHostingServer": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "(Optional) Comma seperated list of Portal machine names from the hosting server"
      }
    },
    "databaseOption": {
      "type": "string",
      "defaultValue": "None",
      "allowedValues": [
        "None",
        "AzureSQLDatabase",
        "AzurePostgreSQLDatabase",
        "AzureFlexiblePostgreSQLDatabase",
        "SQLServerDatabase",
        "AzureMISQLDatabase"
      ],
      "metadata": {
        "description": "(Optional) Type of Database registed as an Enterprise Geodatabase"
      }
    },
    "databaseServerAdministratorAccountUserName": {
      "type": "string",
      "metadata": {
        "description": "User name for the Database Server administrator account"
      },
      "defaultValue": ""
    },
    "databaseServerAdministratorAccountPassword": {
      "type": "securestring",
      "metadata": {
        "description": "Password for the Database Server administrator account"
      },
      "defaultValue": ""
    },
    "databaseUserAccountUserName": {
      "type": "string",
      "metadata": {
        "description": "User name for the Database User account"
      },
      "defaultValue": ""
    },
    "databaseUserAccountPassword": {
      "type": "securestring",
      "metadata": {
        "description": "Password for the Database User account"
      },
      "defaultValue": ""
    },
    "databaseServerHostName": {
      "type": "string",
      "metadata": {
        "description": "Host name for the Database Server. E.g:- <myServer>.database.windows.net if SQL Database or <myServerFQDN> if SQL Server on IaaS VM"
      },
      "defaultValue": ""
    },
    "databaseName": {
      "type": "string",
      "metadata": {
        "description": "Name of the database"
      },
      "defaultValue": ""
    },
    "isManaged": {
      "type": "bool",
      "metadata": {
        "description": "Is Database server to be registered Managed"
      },
      "defaultValue": false
    },
    "enableGeodatabase": {
      "type": "bool",
      "metadata": {
        "description": "Enable Geodatabase on Database to be registered"
      },
      "defaultValue": false
    },
    "registerEGDBAsRasterStore": {
      "type": "bool",
      "metadata": {
        "description": "Register Geodatabase as Raster store"
      },
      "defaultValue": false
    },
    "sqlServerVirtualMachineSize": {
      "type": "string",
      "metadata": {
        "description": "(Optional) Size of the Virtual Machine used for the SQL Server. Required if databaseOption = SQLServerDatabase"
      },
      "defaultValue": "Standard_DS3_v2"
    },
    "sqlServerImageSku": {
      "type": "string",
      "metadata": {
        "description": "(Optional) Name of the SKU used for the SQL Server Image. Required if databaseOption = SQLServerDatabase"
      },
      "defaultValue": "Enterprise"
    },
    "sqlServerImageOffer": {
      "type": "string",
      "metadata": {
        "description": "(Optional) Name of the Offer used for the SQL Server Image. Required if databaseOption = SQLServerDatabase"
      },
      "defaultValue": "SQL2016SP1-WS2016"
    },
    "sqlServerVirtualMachineOSDiskType": {
      "type": "string",
      "defaultValue": "Premium_LRS",
      "allowedValues": [
        "Premium_LRS",
        "Standard_LRS",
        "StandardSSD_LRS",
        "UltraSSD_LRS"
      ],
      "metadata": {
        "description": "(Optional) Managed Disk Type for the Operating System (c Drive) Disk for the SQL Server Virtual Machine"
      }
    },
    "sqlServerVirtualMachineOSDiskSize": {
      "type": "int",
      "defaultValue": 128,
      "allowedValues": [
        128,
        512,
        1024,
        2048,
        4096,
        8192,
        16384,
        32767
      ],
      "metadata": {
        "description": "(Optional) Managed Disk Size for the Operating System (c Drive) Disk for the SQL Server Virtual Machine"
      }
    },
    "_artifactsLocationSasToken": {
      "type": "securestring",
      "metadata": {
        "description": "(SAS) Shared Access Token for the deployment artifacts in an Azure Blob Storage Container"
      },
      "defaultValue": ""
    },
    "_artifactsLocation": {
      "type": "string",
      "metadata": {
        "description": "Fully qualified URL for the deployment artifacts location in an Azure Blob Storage Container"
      },
      "defaultValue": ""
    },
    "debugMode": {
      "type": "bool",
      "metadata": {
        "description": "(Optional) Indicates whether to enable debug settings on the site deployment. Used for troubleshooting only and should not be used for a Production Deployment"
      },
      "defaultValue": false
    },
    "enableRDPAccess": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "(Optional) Indicates whether Remote Desktop Access to the File Share Machine should be enabled."
      }
    },
    "enableAutoShutDown": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "(Optional) Indicates whether to enable auto shutdown at specified time."
      }
    },
    "autoShutDownTime": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "(Optional) Auto Shut down time in hh:ss format."
      }
    },
    "deploymentTimestamp": {
      "type": "string",
      "defaultValue": "[utcNow()]",
      "metadata": {
        "description": "An optional timestamp used to record as a tag which is used by ArcGIS Deployment Tools"
      }
    },
    "useArcGISWebAdaptorForNotebookServer": {
      "type": "bool",
      "metadata": {
        "description": ""
      },
      "defaultValue": false
    },
    "arcgisDeploymentVersion": {
      "type": "string",
      "metadata": {
        "description": "(Optional) Version number of the ArcGIS Software used in the deployment"
      },
      "defaultValue": "11.3"
    },
    "arcgisDeploymentId": {
      "type": "string",
      "metadata": {
        "description": "Deployment Id required in case of post deployment operations and optional in case of new deployments"
      },
      "defaultValue": ""
    },
    "deploymentTrackingID": {
      "type": "string",
      "metadata": {
        "description": "(Optional) deployment Tracking ID based on Orchestrator being Automation or Cloud Builder "
      },
      "defaultValue": "42e014c9-95f0-4206-8f17-daf5ec83028a"
    }
  },
  "variables": {
    "deploymentId": "[if(empty(parameters('arcgisDeploymentId')),uniqueString(resourceGroup().id, concat(parameters('serverContext'), parameters('location')),if(not(empty(parameters('secondaryDnsHostName'))),parameters('secondaryDnsHostName'),parameters('externalDnsHostName'))),parameters('arcgisDeploymentId'))]",
    "computeApiVersion": "2018-06-01",
    "networkApiVersion": "2018-08-01",
    "environmentToBlobEndpoint": {
      "AzureCloud": ".blob.core.windows.net",
      "AzureGermanCloud": ".blob.core.cloudapi.de",
      "AzureUSGovernment": ".blob.core.usgovcloudapi.net",
      "AzureChinaCloud": ".blob.core.chinacloudapi.cn"
    },
    "userAssignedIdentities": {
      "type": "UserAssigned",
      "userAssignedIdentities": "[parameters('userAssignedIdentities')]"
    },
    "publicIPAddressResourceName": "[if(parameters('usesExistingPublicIP'), parameters('existingPublicIPName'), concat(parameters('deploymentPrefix'), 'PublicIP'))]",
    "publicIPAddressRDPResourceName": "[concat(parameters('deploymentPrefix'), 'PublicIP-RDP')]",
    "publicIPAddressResourceGroupName": "[if(parameters('usesExistingPublicIP'), parameters('existingPublicIPResourceGroupName'), resourceGroup().name)]",
    "unusedPublicIPPWhenUsingPrivateIPDnsPrefix": "[concat('ip',variables('deploymentId'),parameters('serverContext'))]",
    "unusedPublicIPWhenUsingPrivateIPResourceName": "[concat(variables('unusedPublicIPPWhenUsingPrivateIPDnsPrefix'),'UnusedPublicIP')]",
    "vnetID": "[resourceId(parameters('virtualNetworkResourceGroupName'), 'Microsoft.Network/virtualNetworks',parameters('existingVirtualNetworkName'))]",
    "subnetRef": "[concat(variables('vnetID'),'/subnets/',parameters('subnetName'))]",
    "appGatewaySubnetRef": "[concat(variables('vnetID'),'/subnets/',parameters('appGatewaySubnetName'))]",
    "nicName": "nic",
    "serverAvailablitySetName": "[concat(parameters('deploymentPrefix'), 'AvailabilitySet-', parameters('serverContext'))]",
    "virtualMachineNames": "[split(parameters('virtualMachineNames'),',')]",
    "numberOfVirtualMachines": "[length(variables('virtualMachineNames'))]",
    "virtualMachineImageSpecs": "[split(parameters('virtualMachineImageSpecs'),',')]",
    "securityTagOption": {
      "true": "Federated",
      "false": "StandAlone"
    },
    "frontendIPConfigurationsName": "[concat(parameters('deploymentPrefix'), 'StandAloneServerAppGatewayFrontendIP')]",
    "publicIPFrontendIPConfigurationsName": "[concat(parameters('deploymentPrefix'), 'StandAloneServerAppGatewayPublicFrontendIP')]",
    "publicIPFrontEndConfiguration": [
      {
        "name": "[variables('frontendIPConfigurationsName')]",
        "properties": {
          "PublicIPAddress": {
            "id": "[resourceId(variables('publicIPAddressResourceGroupName'),'Microsoft.Network/publicIPAddresses',variables('publicIPAddressResourceName'))]"
          }
        }
      }
    ],
    "privateIPFrontEndConfiguration": {
      "true": [
        {
          "name": "unusedAppGatewayFrontendPublicIP",
          "properties": {
            "PublicIPAddress": {
              "id": "[resourceId('Microsoft.Network/publicIPAddresses',variables('unusedPublicIPWhenUsingPrivateIPResourceName'))]"
            }
          }
        },
        {
          "name": "[variables('frontendIPConfigurationsName')]",
          "properties": {
            "privateIPAddress": "[parameters('appGatewayPrivateIP')]",
            "privateIPAllocationMethod": "Static",
            "subnet": {
              "id": "[resourceId(parameters('virtualNetworkResourceGroupName'),'Microsoft.Network/virtualNetworks/subnets', parameters('existingVirtualNetworkName'), parameters('appGatewayPrivateIPSubnet'))]"
            }
          }
        }
      ],
      "false": [
        {
          "name": "[variables('frontendIPConfigurationsName')]",
          "properties": {
            "privateIPAddress": "[parameters('appGatewayPrivateIP')]",
            "privateIPAllocationMethod": "Static",
            "subnet": {
              "id": "[resourceId(parameters('virtualNetworkResourceGroupName'),'Microsoft.Network/virtualNetworks/subnets', parameters('existingVirtualNetworkName'), parameters('appGatewayPrivateIPSubnet'))]"
            }
          }
        }
      ]
    },
    "frontendport443Name": "[concat(parameters('deploymentPrefix'), 'StandAloneServerPort443')]",
    "frontendport80Name": "[concat(parameters('deploymentPrefix'), 'StandAloneServerPort80')]",
    "httpDeploymentListnerName": "[concat(parameters('deploymentPrefix'), 'Http', 'StandAloneServerDeploymentListner')]",
    "httpsDeploymentListnerName": "[concat(parameters('deploymentPrefix'), 'Https', 'StandAloneServerDeploymentListner')]",
    "urlPathMapsName": "[concat(parameters('deploymentPrefix'), 'StandAloneServerPathMap')]",
    "redirectConfigurationName": "[concat(parameters('deploymentPrefix'), 'StandAloneServerHttpToHttps')]",
    "requestRoutingRule": "[concat(parameters('deploymentPrefix'), 'StandAloneServerRequestRoutingRule')]",
    "httpToHttpsRequestRoutingRule": "[concat(parameters('deploymentPrefix'), 'HttpToHttps','StandAloneServerRequestRoutingRule')]",
    "serverBackendSSLCertName": "[concat(parameters('serverContext'),'-',variables('securityTagOption')[string(parameters('federateSite'))],'ServerBackendSSLCert')]",
    "serverBackendPoolName": "[concat(parameters('serverContext'),'-',variables('securityTagOption')[string(parameters('federateSite'))],'ServerBackendPool')]",
    "serverBackendHttpsSettingName": "[concat(parameters('serverContext'),'-',variables('securityTagOption')[string(parameters('federateSite'))],'ServerHttpsSetting')]",
    "geoeventServerBackendHttpsSettingName": "[concat(parameters('geoeventServerContext'),'-',variables('securityTagOption')[string(parameters('federateSite'))],'GeoeventServerHttpsSetting')]",
    "wsGeoeventServerBackendHttpsSettingName": "[concat(parameters('geoeventServerContext'),'-',variables('securityTagOption')[string(parameters('federateSite'))],'WSGeoeventServerHttpsSetting')]",
    "wsMissionServerBackendHttpsSettingName": "[concat(parameters('serverContext'),'-',variables('securityTagOption')[string(parameters('federateSite'))],'WSMissionServerHttpsSetting')]",
    "wfmServerWorkflowBackendHttpsSettingName": "[concat(parameters('serverContext'),'-',variables('securityTagOption')[string(parameters('federateSite'))],'WFMServerWorkflowHttpsSetting')]",
    "serverPathRuleName": "[concat(parameters('serverContext'),'-',variables('securityTagOption')[string(parameters('federateSite'))],'ServerPathRule')]",
    "geoeventServerPathRuleName": "[concat(parameters('geoeventServerContext'),'-',variables('securityTagOption')[string(parameters('federateSite'))],'GeoeventServerPathRule')]",
    "wsGeoeventServerPathRuleName": "[concat(parameters('geoeventServerContext'),'-',variables('securityTagOption')[string(parameters('federateSite'))],'WSGeoeventServerPathRule')]",
    "wsMissionServerPathRuleName": "[concat(parameters('serverContext'),'-',variables('securityTagOption')[string(parameters('federateSite'))],'WSMissionServerPathRule')]",
    "wfmServerWorkflowPathRuleName": "[concat(parameters('serverContext'),'-',variables('securityTagOption')[string(parameters('federateSite'))],'WFMServerWorkflowPathRule')]",
    "serverRewriteRuleSetName": "[concat(parameters('serverContext'),'-',variables('securityTagOption')[string(parameters('federateSite'))],'ServerRewriteRuleSet')]",
    "geoeventServerRewriteRuleSetName": "[concat(parameters('geoeventServerContext'),'-',variables('securityTagOption')[string(parameters('federateSite'))],'GeoeventServerRewriteRuleSet')]",
    "wsGeoeventServerRewriteRuleSetName": "[concat(parameters('geoeventServerContext'),'-',variables('securityTagOption')[string(parameters('federateSite'))],'WSGeoeventServerRewriteRuleSet')]",
    "wsMissionServerRewriteRuleSetName": "[concat(parameters('serverContext'),'-',variables('securityTagOption')[string(parameters('federateSite'))],'WSMissionServerRewriteRuleSet')]",
    "wfmServeRewriteRuleSetName": "[concat(parameters('serverContext'),'-',variables('securityTagOption')[string(parameters('federateSite'))],'WFMServerRewriteRuleSet')]",
    "serverBackendProbeName": "[concat(parameters('serverContext'),'-',variables('securityTagOption')[string(parameters('federateSite'))],'ServerProbeName')]",
    "geoeventServerProbeName": "[concat(parameters('geoeventServerContext'),'-',variables('securityTagOption')[string(parameters('federateSite'))],'GeoeventServerProbeName')]",
    "wfmServerProbeName": "[concat(parameters('serverContext'),'-',variables('securityTagOption')[string(parameters('federateSite'))],'WFMServerProbeName')]",
    "dscExtensionArchiveFileName": "DSC.zip",
    "dscScriptFunction": "GISServerSingleTierConfiguration",
    "notebookDscScriptFunction": "NotebookServerSingleTierConfiguration",
    "missionDscScriptFunction": "MissionServerSingleTierConfiguration",
    "sqlServerDscScriptFunction": "SQLServerConfiguration",
    "cloudStoreCredentialsPassword": {
      "AccessKey": "[parameters('cloudStorageAccountKey')]",
      "SASToken": "[parameters('cloudStorageSASToken')]",
      "ServicePrincipal": "placeholder",
      "UserAssignedIdentity": "placeholder"
    },
    "cloudStorageAccountCredentialsUserName": {
      "false": "placeholder",
      "true": "[concat(parameters('cloudStorageAccountName'),variables('environmentToBlobEndpoint')[parameters('environment')])]"
    },
    "cloudStorageOption": {
      "true": "[concat(substring(parameters('externalDnsHostName'), 0, indexOf(parameters('externalDnsHostName'),'.')), '@', parameters('cloudStorageAccountName'), variables('environmentToBlobEndpoint')[parameters('environment')], '@', parameters('cloudStorageAccountResourceGroupName'),'@',string(parameters('useAzureFiles')), '@', parameters('cloudStorageAuthenticationType'))]",
      "false": ""
    },
    "portalSiteAdministratorAccountUserName": {
      "false": "placeholder",
      "true": "[parameters('portalSiteAdministratorAccountUserName')]"
    },
    "portalSiteAdministratorAccountPassword": {
      "false": "placeholder",
      "true": "[parameters('portalSiteAdministratorAccountPassword')]"
    },
    "databaseServerAdministratorAccountUserName": {
      "true": "placeholder",
      "false": "[parameters('databaseServerAdministratorAccountUserName')]"
    },
    "databaseServerAdministratorAccountPassword": {
      "true": "placeholder",
      "false": "[parameters('databaseServerAdministratorAccountPassword')]"
    },
    "databaseUserAccountUserName": {
      "true": "placeholder",
      "false": "[parameters('databaseUserAccountUserName')]"
    },
    "databaseUserAccountPassword": {
      "true": "placeholder",
      "false": "[parameters('databaseUserAccountPassword')]"
    },
    "databaseServerHostName": {
      "None": "placeholder",
      "AzureSQLDatabase": "[parameters('databaseServerHostName')]",
      "AzurePostgreSQLDatabase": "[parameters('databaseServerHostName')]",
      "AzureFlexiblePostgreSQLDatabase": "[parameters('databaseServerHostName')]",
      "SQLServerDatabase": "[parameters('databaseServerHostName')]",
      "AzureMISQLDatabase": "[parameters('databaseServerHostName')]"
    },
    "vmRoleOption": [
      "FileShare,Server",
      "Server",
      "Server",
      "Server",
      "Server",
      "Server",
      "Server",
      "Server",
      "Server",
      "Server",
      "Server",
      "Server",
      "Server",
      "Server",
      "Server",
      "Server",
      "Server",
      "Server",
      "Server",
      "Server",
      "Server",
      "Server",
      "Server",
      "Server",
      "Server"
    ],
    "omsWorkspace": {
      "true": "[concat(parameters('omsWorkspaceName'), if(equals(string(parameters('federateSite')),'True'),',','@') , parameters('omsWorkspaceResourceGroupName'), if(equals(string(parameters('federateSite')),'True'),',','@'), string(parameters('enableServerLogHarvesterPlugin')))]",
      "false": ""
    },
    "omsWorkspaceResourceId": "[if(and(not(empty(parameters('omsWorkspaceResourceGroupName'))),not(empty(parameters('omsWorkspaceName')))), resourceId(parameters('omsWorkspaceResourceGroupName'), 'Microsoft.OperationalInsights/workspaces/', parameters('omsWorkspaceName')),'')]",
    "deployJumpBox": "[if(and(not(parameters('federateSite')),parameters('enableRDPAccess')),bool('true'), bool('false'))]",
    "jumpBoxName": "[concat(parameters('deploymentPrefix'), 'JumpBox')]",
    "jumpBoxNicName": "[concat(variables('jumpBoxName'),'-',variables('nicName'))]"
  },
  "resources": [
    {
      "apiVersion": "2014-04-01-preview",
      "name": "[concat('pid-',parameters('deploymentTrackingID'))]",
      "type": "Microsoft.Resources/deployments",
      "properties": {
        "mode": "Incremental",
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "resources": [
          ]
        }
      }
    },
    {
      "condition": "[and(parameters('useCloudStorage'), parameters('useAzureFiles'))]",
      "name": "[concat('createAFS-',deployment().name)]",
      "type": "Microsoft.Resources/deployments",
      "resourceGroup": "[parameters('cloudStorageAccountResourceGroupName')]",
      "apiVersion": "2018-05-01",
      "properties": {
        "mode": "Incremental",
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "resources": [
            {
              "type": "Microsoft.Storage/storageAccounts/fileServices/shares",
              "apiVersion": "2021-06-01",
              "name": "[concat(parameters('cloudStorageAccountName'), '/default/', parameters('fileShareName'))]",
              "location": "[parameters('location')]"
            }
          ]
        }
      }
    },
    {
      "condition": "[variables('deployJumpBox')]",
      "type": "Microsoft.Network/publicIPAddresses",
      "name": "[variables('publicIPAddressRDPResourceName')]",
      "apiVersion": "[variables('networkApiVersion')]",
      "location": "[parameters('location')]",
      "tags": {
        "displayName": "Public IP Address - RDP (Optional)",
        "arcgis-deployment-id": "[variables('deploymentId')]"
      },
      "properties": {
        "publicIPAllocationMethod": "Dynamic",
        "idleTimeoutInMinutes": 4,
        "dnsSettings": {
          "domainNameLabel": "[concat(parameters('dnsPrefixForPublicIpAddress'),'-rdp')]"
        }
      }
    },
    {
      "condition": "[variables('deployJumpBox')]",
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[variables('jumpBoxNicName')]",
      "location": "[resourceGroup().location]",
      "apiVersion": "[variables('networkApiVersion')]",
      "tags": {
        "displayName": "RDP Jump Box Network Interface",
        "arcgis-deployment-id": "[variables('deploymentId')]"
      },
      "dependsOn": [
        "[concat('Microsoft.Network/publicIPAddresses/', variables('publicIPAddressRDPResourceName'))]"
      ],
      "properties": {
        "ipConfigurations": [
          {
            "name": "jumpbox-ipconfig",
            "properties": {
              "privateIPAllocationMethod": "Dynamic",
              "publicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIPAddresses',variables('publicIPAddressRDPResourceName'))]"
              },
              "subnet": {
                "id": "[variables('subnetRef')]"
              }
            }
          }
        ]
      }
    },
    {
      "condition": "[and(not(empty(parameters('adminPassword'))),variables('deployJumpBox'))]",
      "type": "Microsoft.Compute/virtualMachines",
      "name": "[variables('jumpBoxName')]",
      "location": "[resourceGroup().location]",
      "apiVersion": "[variables('computeApiVersion')]",
      "identity": "[if(empty(parameters('userAssignedIdentities')),json('null'),variables('userAssignedIdentities'))]",
      "tags": {
        "displayName": "RDP Jump Box",
        "arcgis-deployment-id": "[variables('deploymentId')]",
        "arcgis-vm-roles": "RDPJumpBox"
      },
      "dependsOn": [
        "[concat('Microsoft.Network/networkInterfaces/', variables('jumpBoxNicName'))]"
      ],
      "properties": {
        "hardwareProfile": {
          "vmSize": "Standard_DS2_v2"
        },
        "osProfile": {
          "computerName": "[variables('jumpBoxName')]",
          "adminUsername": "[parameters('adminUsername')]",
          "adminPassword": "[parameters('adminPassword')]",
          "windowsConfiguration": {
            "enableAutomaticUpdates": "[parameters('enableAutomaticUpdates')]",
            "timeZone": "[parameters('timeZoneId')]"
          }
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "MicrosoftWindowsServer",
            "offer": "WindowsServer",
            "sku": "[if(and(contains(parameters('arcgisDeploymentVersion'),'@'),not(startsWith(first(split(parameters('arcgisDeploymentVersion'),'@')),'11'))),'2019-Datacenter-smalldisk','2022-datacenter-smalldisk-g2')]",
            "version": "[parameters('windowsServerBaseImageReferenceVersion')]"
          },
          "osDisk": {
            "name": "[concat(variables('jumpBoxName'),'-','OsDisk')]",
            "managedDisk": {
              "storageAccountType": "Premium_LRS"
            },
            "diskSizeGB": 64,
            "caching": "ReadWrite",
            "createOption": "FromImage"
          }
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces',variables('jumpBoxNicName'))]"
            }
          ]
        }
      }
    },
    {
      "condition": "[and(equals(string(variables('deployJumpBox')),'True'),equals(string(parameters('enableAutoShutDown')),'True'))]",
      "apiVersion": "2018-09-15",
      "type": "Microsoft.DevTestLab/schedules",
      "name": "[concat('shutdown-computevm-', variables('jumpBoxName'))]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[variables('jumpBoxName')]"
      ],
      "properties": {
        "status": "Enabled",
        "timeZoneId": "[parameters('timeZoneId')]",
        "taskType": "ComputeVmShutdownTask",
        "notificationSettings": {
          "status": "Disabled",
          "timeInMinutes": 15,
          "webhookUrl": ""
        },
        "targetResourceId": "[resourceId('Microsoft.Compute/virtualMachines/', variables('jumpBoxName'))]",
        "dailyRecurrence": {
          "time": "[parameters('autoShutDownTime')]"
        }
      }
    },
    {
      "condition": "[and(equals(string(variables('deployJumpBox')),'True'),equals(string(parameters('joinWindowsDomain')),'True'))]",
      "apiVersion": "[variables('computeApiVersion')]",
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "name": "[concat(variables('jumpBoxName'),'/JoinDomain')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[variables('jumpBoxName')]"
      ],
      "tags": {
        "displayName": "(Optional) Jumpbox Domain Join"
      },
      "properties": {
        "publisher": "Microsoft.Compute",
        "type": "JsonADDomainExtension",
        "typeHandlerVersion": "1.3",
        "autoUpgradeMinorVersion": true,
        "settings": {
          "Name": "[parameters('windowsDomainName')]",
          "User": "[parameters('windowsDomainAdministratorUserName')]",
          "Restart": "true",
          "Options": 3
        },
        "protectedSettings": {
          "Password": "[parameters('windowsDomainAdministratorPassword')]"
        }
      }
    },
    {
      "condition": "[and(equals(string(parameters('usesExistingPublicIP')), 'False'),and(equals(string(parameters('federateSite')), 'False'),or(and(equals(string(parameters('usesPrivateIP')), 'False'),not(empty(parameters('dnsPrefixForPublicIpAddress')))),and(equals(string(parameters('usesPrivateIP')), 'True') ,equals(string(parameters('deployPublicIPWhenUsingPrivateIP')), 'True')))))]",
      "type": "Microsoft.Network/publicIPAddresses",
      "name": "[if(parameters('usesPrivateIP'),variables('unusedPublicIPWhenUsingPrivateIPResourceName'),variables('publicIPAddressResourceName'))]",
      "apiVersion": "[variables('computeApiVersion')]",
      "location": "[parameters('location')]",
      "tags": {
        "displayName": "Application Gateway Public IP Address",
        "arcgis-deployment-id": "[variables('deploymentId')]"
      },
      "sku": {
        "name": "Standard"
      },
      "scale": null,
      "properties": {
        "publicIPAllocationMethod": "Static",
        "idleTimeoutInMinutes": 4,
        "dnsSettings": {
          "domainNameLabel": "[if(parameters('usesPrivateIP'),variables('unusedPublicIPPWhenUsingPrivateIPDnsPrefix'),parameters('dnsPrefixForPublicIpAddress'))]"
        }
      },
      "dependsOn": [
      ]
    },
    {
      "apiVersion": "2017-03-30",
      "type": "Microsoft.Compute/availabilitySets",
      "name": "[variables('serverAvailablitySetName')]",
      "location": "[parameters('location')]",
      "tags": {
        "displayName": "GIS Server Availability Set",
        "arcgis-deployment-id": "[variables('deploymentId')]",
        "arcgis-federated-deployment-id": "[parameters('federatedSiteDeploymentId')]"
      },
      "properties": {
        "platformUpdateDomainCount": 2,
        "platformFaultDomainCount": 2
      },
      "sku": {
        "name": "Aligned"
      }
    },
    {
      "apiVersion": "[variables('networkApiVersion')]",
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[concat(variables('virtualMachineNames')[copyIndex()], '-', variables('nicName'))]",
      "location": "[parameters('location')]",
      "copy": {
        "name": "nic-copy",
        "count": "[variables('numberOfVirtualMachines')]"
      },
      "tags": {
        "displayName": "GIS Server Network Interfaces",
        "arcgis-deployment-id": "[variables('deploymentId')]",
        "arcgis-federated-deployment-id": "[parameters('federatedSiteDeploymentId')]"
      },
      "dependsOn": [
      ],
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig",
            "properties": {
              "privateIPAllocationMethod": "Dynamic",
              "subnet": {
                "id": "[variables('subnetRef')]"
              }
            }
          }
        ]
      }
    },
    {
      "condition": "[not(empty(parameters('adminPassword')))]",
      "apiVersion": "[variables('computeApiVersion')]",
      "type": "Microsoft.Compute/virtualMachines",
      "name": "[variables('virtualMachineNames')[copyIndex()]]",
      "location": "[parameters('location')]",
      "identity": "[if(empty(parameters('userAssignedIdentities')),json('null'),variables('userAssignedIdentities'))]",
      "copy": {
        "name": "vm-copy",
        "count": "[variables('numberOfVirtualMachines')]"
      },
      "tags": {
        "arcgis-vm-roles": "[variables('vmRoleOption')[copyIndex()]]",
        "arcgis-deployment-id": "[variables('deploymentId')]",
        "displayName": "GIS Servers",
        "arcgis-federated-deployment-id": "[parameters('federatedSiteDeploymentId')]"
      },
      "plan": "[if(equals(string(parameters('imageReferences')[variables('virtualMachineImageSpecs')[copyIndex()]]['AzureVMImageType']),'0'),json(concat('{\"publisher\":\"',parameters('imageReferences')[variables('virtualMachineImageSpecs')[copyIndex()]]['Publisher'],'\",\"product\":\"',parameters('imageReferences')[variables('virtualMachineImageSpecs')[copyIndex()]]['Offer'],'\",\"name\":\"',parameters('imageReferences')[variables('virtualMachineImageSpecs')[copyIndex()]]['SKU'],'\"}')),json('null'))]",
      "dependsOn": [
        "[concat('Microsoft.Network/networkInterfaces/', variables('virtualMachineNames')[copyIndex()], '-', variables('nicName'))]",
        "[concat('Microsoft.Compute/availabilitySets/', variables('serverAvailablitySetName'))]"
      ],
      "properties": {
        "availabilitySet": {
          "id": "[resourceId('Microsoft.Compute/availabilitySets',variables('serverAvailablitySetName'))]"
        },
        "hardwareProfile": {
          "vmSize": "[parameters('virtualMachineSize')]"
        },
        "osProfile": {
          "computername": "[variables('virtualMachineNames')[copyIndex()]]",
          "adminUsername": "[parameters('adminUsername')]",
          "adminPassword": "[parameters('adminPassword')]",
          "windowsConfiguration": {
            "enableAutomaticUpdates": "[parameters('enableAutomaticUpdates')]",
            "timeZone": "[parameters('timeZoneId')]"
          }
        },
        "storageProfile": {
          "imageReference": "[if(equals(string(parameters('imageReferences')[variables('virtualMachineImageSpecs')[copyIndex()]]['AzureVMImageType']),'0'),json(concat('{\"publisher\":\"',parameters('imageReferences')[variables('virtualMachineImageSpecs')[copyIndex()]]['Publisher'],'\",\"offer\":\"',parameters('imageReferences')[variables('virtualMachineImageSpecs')[copyIndex()]]['Offer'],'\",\"sku\":\"',parameters('imageReferences')[variables('virtualMachineImageSpecs')[copyIndex()]]['SKU'],'\",\"version\":\"latest\"}')),if(equals(string(parameters('imageReferences')[variables('virtualMachineImageSpecs')[copyIndex()]]['AzureVMImageType']),'1'),json(concat('{\"id\":\"',resourceid(string(parameters('imageReferences')[variables('virtualMachineImageSpecs')[copyIndex()]]['UserImageResourceGroupName']),'Microsoft.Compute/images',string(parameters('imageReferences')[variables('virtualMachineImageSpecs')[copyIndex()]]['UserImageName'])),'\"}')),json(concat('{\"id\":\"',string(parameters('imageReferences')[variables('virtualMachineImageSpecs')[copyIndex()]]['ComputeGalleryImageVersionResourceId']),'\"}'))))]",
          "osDisk": {
            "name": "[concat(variables('virtualMachineNames')[copyIndex()],'-','OSDisk')]",
            "managedDisk": {
              "storageAccountType": "[parameters('virtualMachineOSDiskType')]"
            },
            "diskSizeGB": "[parameters('virtualMachineOSDiskSize')]",
            "caching": "ReadWrite",
            "createOption": "FromImage"
          },
          "dataDisks": "[if(equals(string(parameters('enableVirtualMachineDataDisk')),'True'), json(concat('[{\"name\":\"', concat(variables('virtualMachineNames')[copyIndex()],'-','DataDisk'), '\", \"lun\": 0, \"createOption\": \"empty\", \"diskSizeGB\": \"', parameters('virtualMachineDataDiskSize'), '\", \"managedDisk\": { \"storageAccountType\":\"', parameters('virtualMachineDataDiskType') ,'\"} }]')), json('null'))]"
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces/', concat(variables('virtualMachineNames')[copyIndex()], '-',variables('nicName')))]"
            }
          ]
        }
      }
    },
    {
      "condition": "[equals(string(parameters('enableAutoShutDown')), 'True')]",
      "apiVersion": "2018-09-15",
      "type": "Microsoft.DevTestLab/schedules",
      "name": "[concat('shutdown-computevm-', variables('virtualMachineNames')[copyIndex()])]",
      "location": "[resourceGroup().location]",
      "copy": {
        "name": "gisServerAutoShutDownCopy",
        "count": "[length(variables('virtualMachineNames'))]"
      },
      "dependsOn": [
        "[concat('Microsoft.Compute/virtualMachines/', variables('virtualMachineNames')[copyIndex()])]"
      ],
      "properties": {
        "status": "[if(parameters('enableAutoShutDown'),'Enabled','Disabled')]",
        "timeZoneId": "[parameters('timeZoneId')]",
        "taskType": "ComputeVmShutdownTask",
        "notificationSettings": {
          "status": "Disabled",
          "timeInMinutes": 15,
          "webhookUrl": ""
        },
        "targetResourceId": "[resourceId('Microsoft.Compute/virtualMachines/', variables('virtualMachineNames')[copyIndex()])]",
        "dailyRecurrence": {
          "time": "[parameters('autoShutDownTime')]"
        }
      }
    },
    {
      "condition": "[equals(string(parameters('joinWindowsDomain')), 'True')]",
      "apiVersion": "[variables('computeApiVersion')]",
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "name": "[concat(variables('virtualMachineNames')[copyIndex()],'/JoinDomain')]",
      "location": "[parameters('location')]",
      "copy": {
        "name": "gisServerDomainJoinCopy",
        "count": "[length(variables('virtualMachineNames'))]"
      },
      "dependsOn": [
        "[concat('Microsoft.Compute/virtualMachines/', variables('virtualMachineNames')[copyIndex()])]"
      ],
      "tags": {
        "displayName": "(Optional) GIS Servers Domain Join"
      },
      "properties": {
        "publisher": "Microsoft.Compute",
        "type": "JsonADDomainExtension",
        "typeHandlerVersion": "1.3",
        "autoUpgradeMinorVersion": true,
        "settings": {
          "Name": "[parameters('windowsDomainName')]",
          "User": "[parameters('windowsDomainAdministratorUserName')]",
          "Restart": "true",
          "Options": 3
        },
        "protectedSettings": {
          "Password": "[parameters('windowsDomainAdministratorPassword')]"
        }
      }
    },
    {
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "condition": "[and(not(empty(parameters('omsWorkspaceResourceGroupName'))),not(empty(parameters('omsWorkspaceName'))))]",
      "name": "[concat(variables('virtualMachineNames')[copyIndex()],'/LogAnalytics')]",
      "apiVersion": "2015-05-01-preview",
      "location": "[parameters('location')]",
      "copy": {
        "name": "vm-copy",
        "count": "[variables('numberOfVirtualMachines')]"
      },
      "dependsOn": [
        "[concat('Microsoft.Compute/virtualMachines/', variables('virtualMachineNames')[copyIndex()])]"
      ],
      "properties": {
        "publisher": "Microsoft.EnterpriseCloud.Monitoring",
        "type": "MicrosoftMonitoringAgent",
        "typeHandlerVersion": "1.0",
        "autoUpgradeMinorVersion": true,
        "settings": {
          "workspaceId": "[if(not(empty(variables('omsWorkspaceResourceId'))),reference(variables('omsWorkspaceResourceId'),'2015-11-01-preview').customerId ,json('null'))]"
        },
        "protectedSettings": {
          "workspaceKey": "[if(not(empty(variables('omsWorkspaceResourceId'))),listKeys(variables('omsWorkspaceResourceId'),'2015-11-01-preview').primarySharedKey ,json('null'))]"
        }
      }
    },
    {
      "condition": "[or(not(empty(parameters('selfSignedSSLCertificatePassword'))),not(empty(parameters('serverInternalCertificatePassword'))))]",
      "name": "[concat('generateSSLCertificatesCustomExtension-',deployment().name)]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2018-05-01",
      "dependsOn": [
        "gisServerDomainJoinCopy"
      ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(parameters('_artifactsLocation'),'/','generatecertificate-cse.json', parameters('_artifactsLocationSasToken'))]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "vmName": {
            "value": "[variables('virtualMachineNames')[0]]"
          },
          "useSelfSignedInternalSSLCertificate": {
            "value": "[parameters('useSelfSignedInternalSSLCertificate')]"
          },
          "selfSignedSSLCertificatePassword": {
            "value": "[parameters('selfSignedSSLCertificatePassword')]"
          },
          "serverInternalCertificateFileName": {
            "value": "[parameters('serverInternalCertificateFileName')]"
          },
          "fileShareName": {
            "value": "[parameters('fileShareName')]"
          },
          "serverVirtualMachineNames": {
            "value": "[parameters('virtualMachineNames')]"
          },
          "_artifactsLocation": {
            "value": "[parameters('_artifactsLocation')]"
          },
          "_artifactsLocationSasToken": {
            "value": "[parameters('_artifactsLocationSasToken')]"
          }
        }
      }
    },
    {
      "condition": "[variables('deployJumpBox')]",
      "apiVersion": "2018-05-01",
      "name": "[concat('fetchIpAddress-',deployment().name)]",
      "type": "Microsoft.Resources/deployments",
      "dependsOn": [
        "[concat('Microsoft.Network/publicIPAddresses/', variables('publicIPAddressRDPResourceName'))]",
        "[concat('Microsoft.Network/networkInterfaces/', variables('jumpBoxNicName'))]",
        "[concat('Microsoft.Compute/virtualMachines/', variables('jumpBoxName'))]",
        "[concat('Microsoft.Resources/deployments/', 'generateSSLCertificatesCustomExtension-', deployment().name)]"
      ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(parameters('_artifactsLocation'),'/','fetchIpAddress.json', parameters('_artifactsLocationSasToken'))]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "publicIPAddressId": {
            "value": "[resourceId('Microsoft.Network/publicIpAddresses', variables('publicIPAddressRDPResourceName'))]"
          }
        }
      }
    },
    {
      "condition": "[or(not(empty(parameters('sslCertificatePassword'))),or(not(empty(parameters('selfSignedSSLCertificatePassword'))),not(empty(parameters('serverInternalCertificatePassword')))))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2018-05-01",
      "name": "[concat('appGatewayNestedDeployment-',deployment().name)]",
      "resourceGroup": "[parameters('appGatewayResourceGroupName')]",
      "dependsOn": [
        "[concat('Microsoft.Resources/deployments/', 'generateSSLCertificatesCustomExtension-', deployment().name)]",
        "[concat('Microsoft.Resources/deployments/', 'fetchIpAddress-', deployment().name)]"
      ],
      "properties": {
        "mode": "Incremental",
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "parameters": {
          },
          "variables": {
          },
          "resources": [
            {
              "type": "Microsoft.Network/applicationGateways",
              "apiVersion": "2022-11-01",
              "name": "[parameters('appGatewayName')]",
              "location": "[parameters('location')]",
              "tags": APPGATEWAYTAGS,
              "properties": APPGATEWAYPROPERTIESOBJECT
            }
          ]
        },
        "parameters": {
        }
      }
    },
    {
      "condition": "[and(not(equals(string(parameters('serverRole')), 'NotebookServer')),not(equals(string(parameters('serverRole')), 'MissionServer')))]",
      "name": "[concat(variables('virtualMachineNames')[copyIndex()],'/DSCConfiguration')]",
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "location": "[parameters('location')]",
      "copy": {
        "name": "DSC-copy",
        "count": "[variables('numberOfVirtualMachines')]",
        "mode": "serial"
      },
      "tags": {
        "displayName": "GIS Server DSC Scripts"
      },
      "dependsOn": [
        "[concat('Microsoft.Resources/deployments/','createAFS-', deployment().name)]",
        "[concat('Microsoft.Resources/deployments/','appGatewayNestedDeployment-',deployment().name)]"
      ],
      "apiVersion": "[variables('computeApiVersion')]",
      "properties": {
        "publisher": "Microsoft.Powershell",
        "type": "DSC",
        "typeHandlerVersion": "2.77",
        "autoUpgradeMinorVersion": true,
        "settings": {
          "wmfVersion": "latest",
          "configuration": {
            "url": "[concat(parameters('_artifactsLocation'), '/', variables('dscExtensionArchiveFileName'))]",
            "function": "[variables('dscScriptFunction')]",
            "script": "[concat(variables('dscScriptFunction'), '.ps1')]"
          },
          "configurationArguments": {
            "ServiceCredentialIsDomainAccount": "[parameters('arcgisServiceAccountIsDomainAccount')]",
            "ServerLicenseFileUrl": "[if(empty(parameters('serverLicenseFileName')), '', concat(parameters('_artifactsLocation'), '/', parameters('serverLicenseFileName'), parameters('_artifactsLocationSasToken')))]",
            "PublicKeySSLCertificateFileUrl": "[if(empty(parameters('publicKeySSLCertificateFileName')), '', concat(parameters('_artifactsLocation'), '/', parameters('publicKeySSLCertificateFileName'), parameters('_artifactsLocationSasToken')))]",
            "ServerMachineNames": "[parameters('virtualMachineNames')]",
            "ExternalDNSHostName": "[parameters('externalDnsHostName')]",
            "PrivateDNSHostName": "[parameters('secondaryDnsHostName')]",
            "FileShareName": "[parameters('fileShareName')]",
            "UseCloudStorage": "[parameters('useCloudStorage')]",
            "UseAzureFiles": "[parameters('useAzureFiles')]",
            "Context": "[parameters('serverContext')]",
            "GeoeventContext": "[parameters('geoeventServerContext')]",
            "PortalContext": "[parameters('federatedSitePortalContext')]",
            "FederateSite": "[parameters('federateSite')]",
            "IsAddingServersOrRegisterEGDB": "[parameters('isAddingServersOrRegisterEGDB')]",
            "ServerFunctions": "[parameters('serverFunctions')]",
            "ServerRole": "[parameters('serverRole')]",
            "OSDiskSize": "[parameters('virtualMachineOSDiskSize')]",
            "EnableDataDisk": "[string(parameters('enableVirtualMachineDataDisk'))]",
            "DataDiskNumber": "[string(parameters('virtualMachineDataDiskNumber'))]",
            "DatabaseServerHostName": "[parameters('databaseServerHostName')]",
            "DatabaseName": "[parameters('databaseName')]",
            "DatabaseOption": "[parameters('databaseOption')]",
            "IsManaged": "[parameters('isManaged')]",
            "EnableGeodatabase": "[parameters('enableGeodatabase')]",
            "RegisterEGDBAsRasterStore": "[parameters('registerEGDBAsRasterStore')]",
            "PortalMachineNamesOnHostingServer": "[parameters('portalMachineNamesOnHostingServer')]",
            "GisServerMachineNamesOnHostingServer": "[parameters('gisServerMachineNamesOnHostingServer')]",
            "EnableLogHarvesterPlugin": "[string(parameters('enableServerLogHarvesterPlugin'))]",
            "IsUpdatingCertificates": "[parameters('isUpdatingCertificates')]",
            "DebugMode": "[string(parameters('debugMode'))]",
            "CloudStorageAuthenticationType": "[parameters('cloudStorageAuthenticationType')]",
            "StorageAccountUserAssignedIdentityClientId": "[parameters('cloudStorageUserAssignedIdentityClientId')]",
            "StorageAccountServicePrincipalTenantId": "[parameters('cloudStorageServicePrincipalTenantId')]",
            "StorageAccountServicePrincipalAuthorityHost": "[parameters('cloudStorageServicePrincipalAuthorityHost')]"
          }
        },
        "protectedSettings": {
          "configurationUrlSasToken": "[parameters('_artifactsLocationSasToken')]",
          "configurationArguments": {
            "ServiceCredential": {
              "userName": "[if(empty(parameters('arcgisServiceAccountUserName')),'PlaceHolder', parameters('arcgisServiceAccountUserName'))]",
              "password": "[if(empty(parameters('arcgisServiceAccountPassword')),'PlaceHolder', parameters('arcgisServiceAccountPassword'))]"
            },
            "MachineAdministratorCredential": {
              "userName": "[if(empty(parameters('adminUsername')),'PlaceHolder', parameters('adminUsername'))]",
              "password": "[if(empty(parameters('adminPassword')),'PlaceHolder', parameters('adminPassword'))]"
            },
            "ServerInternalCertificatePassword": {
              "userName": "Placeholder",
              "password": "[if(equals(string(parameters('useSelfSignedInternalSSLCertificate')),'True'), parameters('selfSignedSSLCertificatePassword'), parameters('serverInternalCertificatePassword'))]"
            },
            "SiteAdministratorCredential": {
              "userName": "[parameters('primarySiteAdministratorAccountUserName')]",
              "password": "[parameters('primarySiteAdministratorAccountPassword')]"
            },
            "StorageAccountCredential": {
              "userName": "[variables('cloudStorageAccountCredentialsUserName')[string(parameters('useCloudStorage'))]]",
              "password": "[if(parameters('useCloudStorage'), variables('cloudStoreCredentialsPassword')[parameters('cloudStorageAuthenticationType')],'placeholder')]"
            },
            "StorageAccountServicePrincipalCredential": {
              "userName": "[if(equals(parameters('cloudStorageAuthenticationType'),'ServicePrincipal'),parameters('cloudStorageServicePrincipalClientId'),'placeholder')]",
              "password": "[if(equals(parameters('cloudStorageAuthenticationType'),'ServicePrincipal'),parameters('cloudStorageServicePrincipalClientSecret'),'placeholder')]"
            },
            "PortalSiteAdministratorCredential": {
              "userName": "[variables('portalSiteAdministratorAccountUserName')[string(parameters('federateSite'))]]",
              "password": "[variables('portalSiteAdministratorAccountPassword')[string(parameters('federateSite'))]]"
            },
            "DatabaseServerAdministratorCredential": {
              "userName": "[variables('databaseServerAdministratorAccountUserName')[string(equals(parameters('databaseOption'), 'None'))]]",
              "password": "[variables('databaseServerAdministratorAccountPassword')[string(equals(parameters('databaseOption'), 'None'))]]"
            },
            "DatabaseUserCredential": {
              "userName": "[variables('databaseUserAccountUserName')[string(equals(parameters('databaseOption'), 'None'))]]",
              "password": "[variables('databaseUserAccountPassword')[string(equals(parameters('databaseOption'), 'None'))]]"
            },
            "CloudStores": "[parameters('cloudStores')]"
          }
        }
      }
    },
    {
      "condition": "[equals(string(parameters('serverRole')), 'NotebookServer')]",
      "name": "[concat(variables('virtualMachineNames')[copyIndex()],'/NBDSCConfiguration')]",
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "location": "[parameters('location')]",
      "copy": {
        "name": "DSC-copy",
        "count": "[variables('numberOfVirtualMachines')]",
        "mode": "serial"
      },
      "tags": {
        "displayName": "Notebook Server DSC Scripts"
      },
      "dependsOn": [
        "[concat('Microsoft.Resources/deployments/','createAFS-', deployment().name)]",
        "[concat('Microsoft.Resources/deployments/', 'appGatewayNestedDeployment-',deployment().name)]"
      ],
      "apiVersion": "[variables('computeApiVersion')]",
      "properties": {
        "publisher": "Microsoft.Powershell",
        "type": "DSC",
        "typeHandlerVersion": "2.77",
        "autoUpgradeMinorVersion": true,
        "settings": {
          "wmfVersion": "latest",
          "configuration": {
            "url": "[concat(parameters('_artifactsLocation'), '/', variables('dscExtensionArchiveFileName'))]",
            "function": "[variables('notebookDscScriptFunction')]",
            "script": "[concat(variables('notebookDscScriptFunction'), '.ps1')]"
          },
          "configurationArguments": {
            "ServiceCredentialIsDomainAccount": "[parameters('arcgisServiceAccountIsDomainAccount')]",
            "PublicKeySSLCertificateFileUrl": "[if(empty(parameters('publicKeySSLCertificateFileName')), '', concat(parameters('_artifactsLocation'), '/', parameters('publicKeySSLCertificateFileName'), parameters('_artifactsLocationSasToken')))]",
            "ServerLicenseFileUrl": "[if(empty(parameters('serverLicenseFileName')), '', concat(parameters('_artifactsLocation'), '/', parameters('serverLicenseFileName'), parameters('_artifactsLocationSasToken')))]",
            "ServerMachineNames": "[parameters('virtualMachineNames')]",
            "ExternalDNSHostName": "[parameters('externalDnsHostName')]",
            "PrivateDNSHostName": "[parameters('secondaryDnsHostName')]",
            "FileShareName": "[parameters('fileShareName')]",
            "UseCloudStorage": "[parameters('useCloudStorage')]",
            "UseAzureFiles": "[parameters('useAzureFiles')]",
            "Context": "[parameters('serverContext')]",
            "PortalContext": "[parameters('federatedSitePortalContext')]",
            "FederateSite": "[parameters('federateSite')]",
            "ServerFunctions": "[parameters('serverFunctions')]",
            "ServerRole": "[parameters('serverRole')]",
            "OSDiskSize": "[parameters('virtualMachineOSDiskSize')]",
            "EnableDataDisk": "[string(parameters('enableVirtualMachineDataDisk'))]",
            "DataDiskNumber": "[string(parameters('virtualMachineDataDiskNumber'))]",
            "PortalMachineNamesOnHostingServer": "[parameters('portalMachineNamesOnHostingServer')]",
            "GisServerMachineNamesOnHostingServer": "[parameters('gisServerMachineNamesOnHostingServer')]",
            "IsUpdatingCertificates": "[parameters('isUpdatingCertificates')]",
            "UseArcGISWebAdaptorForNotebookServer": "[parameters('useArcGISWebAdaptorForNotebookServer')]",
            "DebugMode": "[string(parameters('debugMode'))]",
            "CloudStorageAuthenticationType": "[parameters('cloudStorageAuthenticationType')]",
            "StorageAccountUserAssignedIdentityClientId": "[parameters('cloudStorageUserAssignedIdentityClientId')]",
            "StorageAccountServicePrincipalTenantId": "[parameters('cloudStorageServicePrincipalTenantId')]",
            "StorageAccountServicePrincipalAuthorityHost": "[parameters('cloudStorageServicePrincipalAuthorityHost')]"
          }
        },
        "protectedSettings": {
          "configurationUrlSasToken": "[parameters('_artifactsLocationSasToken')]",
          "configurationArguments": {
            "ServiceCredential": {
              "userName": "[if(empty(parameters('arcgisServiceAccountUserName')),'PlaceHolder', parameters('arcgisServiceAccountUserName'))]",
              "password": "[if(empty(parameters('arcgisServiceAccountPassword')),'PlaceHolder', parameters('arcgisServiceAccountPassword'))]"
            },
            "MachineAdministratorCredential": {
              "userName": "[if(empty(parameters('adminUsername')),'PlaceHolder', parameters('adminUsername'))]",
              "password": "[if(empty(parameters('adminPassword')),'PlaceHolder', parameters('adminPassword'))]"
            },
            "SiteAdministratorCredential": {
              "userName": "[parameters('primarySiteAdministratorAccountUserName')]",
              "password": "[parameters('primarySiteAdministratorAccountPassword')]"
            },
            "ServerInternalCertificatePassword": {
              "userName": "Placeholder",
              "password": "[if(equals(string(parameters('useSelfSignedInternalSSLCertificate')),'True'), parameters('selfSignedSSLCertificatePassword'), parameters('serverInternalCertificatePassword'))]"
            },
            "StorageAccountCredential": {
              "userName": "[variables('cloudStorageAccountCredentialsUserName')[string(parameters('useCloudStorage'))]]",
              "password": "[if(parameters('useCloudStorage'), variables('cloudStoreCredentialsPassword')[parameters('cloudStorageAuthenticationType')],'placeholder')]"
            },
            "StorageAccountServicePrincipalCredential": {
              "userName": "[if(equals(parameters('cloudStorageAuthenticationType'),'ServicePrincipal'),parameters('cloudStorageServicePrincipalClientId'),'placeholder')]",
              "password": "[if(equals(parameters('cloudStorageAuthenticationType'),'ServicePrincipal'),parameters('cloudStorageServicePrincipalClientSecret'),'placeholder')]"
            },
            "PortalSiteAdministratorCredential": {
              "userName": "[variables('portalSiteAdministratorAccountUserName')[string(parameters('federateSite'))]]",
              "password": "[variables('portalSiteAdministratorAccountPassword')[string(parameters('federateSite'))]]"
            }
          }
        }
      }
    },
    {
      "condition": "[equals(string(parameters('serverRole')), 'MissionServer')]",
      "name": "[concat(variables('virtualMachineNames')[copyIndex()],'/MissionDSCConfiguration')]",
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "location": "[parameters('location')]",
      "copy": {
        "name": "DSC-copy",
        "count": "[variables('numberOfVirtualMachines')]",
        "mode": "serial"
      },
      "tags": {
        "displayName": "Mission Server DSC Scripts"
      },
      "dependsOn": [
        "[concat('Microsoft.Resources/deployments/','createAFS-', deployment().name)]",
        "[concat('Microsoft.Resources/deployments/', 'appGatewayNestedDeployment-',deployment().name)]"
      ],
      "apiVersion": "[variables('computeApiVersion')]",
      "properties": {
        "publisher": "Microsoft.Powershell",
        "type": "DSC",
        "typeHandlerVersion": "2.77",
        "autoUpgradeMinorVersion": true,
        "settings": {
          "wmfVersion": "latest",
          "configuration": {
            "url": "[concat(parameters('_artifactsLocation'), '/', variables('dscExtensionArchiveFileName'))]",
            "function": "[variables('missionDscScriptFunction')]",
            "script": "[concat(variables('missionDscScriptFunction'), '.ps1')]"
          },
          "configurationArguments": {
            "ServiceCredentialIsDomainAccount": "[parameters('arcgisServiceAccountIsDomainAccount')]",
            "PublicKeySSLCertificateFileUrl": "[if(empty(parameters('publicKeySSLCertificateFileName')), '', concat(parameters('_artifactsLocation'), '/', parameters('publicKeySSLCertificateFileName'), parameters('_artifactsLocationSasToken')))]",
            "ServerLicenseFileUrl": "[if(empty(parameters('serverLicenseFileName')), '', concat(parameters('_artifactsLocation'), '/', parameters('serverLicenseFileName'), parameters('_artifactsLocationSasToken')))]",
            "ServerMachineNames": "[parameters('virtualMachineNames')]",
            "ExternalDNSHostName": "[parameters('externalDnsHostName')]",
            "PrivateDNSHostName": "[parameters('secondaryDnsHostName')]",
            "FileShareName": "[parameters('fileShareName')]",
            "UseCloudStorage": "[parameters('useCloudStorage')]",
            "UseAzureFiles": "[parameters('useAzureFiles')]",
            "Context": "[parameters('serverContext')]",
            "PortalContext": "[parameters('federatedSitePortalContext')]",
            "FederateSite": "[parameters('federateSite')]",
            "ServerFunctions": "[parameters('serverFunctions')]",
            "ServerRole": "[parameters('serverRole')]",
            "OSDiskSize": "[parameters('virtualMachineOSDiskSize')]",
            "EnableDataDisk": "[string(parameters('enableVirtualMachineDataDisk'))]",
            "DataDiskNumber": "[string(parameters('virtualMachineDataDiskNumber'))]",
            "PortalMachineNamesOnHostingServer": "[parameters('portalMachineNamesOnHostingServer')]",
            "GisServerMachineNamesOnHostingServer": "[parameters('gisServerMachineNamesOnHostingServer')]",
            "IsUpdatingCertificates": "[parameters('isUpdatingCertificates')]",
            "DebugMode": "[string(parameters('debugMode'))]",
            "CloudStorageAuthenticationType": "[parameters('cloudStorageAuthenticationType')]",
            "StorageAccountUserAssignedIdentityClientId": "[parameters('cloudStorageUserAssignedIdentityClientId')]",
            "StorageAccountServicePrincipalTenantId": "[parameters('cloudStorageServicePrincipalTenantId')]",
            "StorageAccountServicePrincipalAuthorityHost": "[parameters('cloudStorageServicePrincipalAuthorityHost')]"
          }
        },
        "protectedSettings": {
          "configurationUrlSasToken": "[parameters('_artifactsLocationSasToken')]",
          "configurationArguments": {
            "ServiceCredential": {
              "userName": "[if(empty(parameters('arcgisServiceAccountUserName')),'PlaceHolder', parameters('arcgisServiceAccountUserName'))]",
              "password": "[if(empty(parameters('arcgisServiceAccountPassword')),'PlaceHolder', parameters('arcgisServiceAccountPassword'))]"
            },
            "MachineAdministratorCredential": {
              "userName": "[if(empty(parameters('adminUsername')),'PlaceHolder', parameters('adminUsername'))]",
              "password": "[if(empty(parameters('adminPassword')),'PlaceHolder', parameters('adminPassword'))]"
            },
            "SiteAdministratorCredential": {
              "userName": "[parameters('primarySiteAdministratorAccountUserName')]",
              "password": "[parameters('primarySiteAdministratorAccountPassword')]"
            },
            "ServerInternalCertificatePassword": {
              "userName": "Placeholder",
              "password": "[if(equals(string(parameters('useSelfSignedInternalSSLCertificate')),'True'), parameters('selfSignedSSLCertificatePassword'), parameters('serverInternalCertificatePassword'))]"
            },
            "StorageAccountCredential": {
              "userName": "[variables('cloudStorageAccountCredentialsUserName')[string(parameters('useCloudStorage'))]]",
              "password": "[if(parameters('useCloudStorage'), variables('cloudStoreCredentialsPassword')[parameters('cloudStorageAuthenticationType')],'placeholder')]"
            },
            "StorageAccountServicePrincipalCredential": {
              "userName": "[if(equals(parameters('cloudStorageAuthenticationType'),'ServicePrincipal'),parameters('cloudStorageServicePrincipalClientId'),'placeholder')]",
              "password": "[if(equals(parameters('cloudStorageAuthenticationType'),'ServicePrincipal'),parameters('cloudStorageServicePrincipalClientSecret'),'placeholder')]"
            },
            "PortalSiteAdministratorCredential": {
              "userName": "[variables('portalSiteAdministratorAccountUserName')[string(parameters('federateSite'))]]",
              "password": "[variables('portalSiteAdministratorAccountPassword')[string(parameters('federateSite'))]]"
            }
          }
        }
      }
    },
    {
      "condition": "[equals(string(parameters('databaseOption')), 'SQLServerDatabase')]",
      "apiVersion": "[variables('networkApiVersion')]",
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[concat(parameters('databaseServerHostName'), '-', variables('nicName'))]",
      "location": "[parameters('location')]",
      "tags": {
        "displayName": "(Optional) SQL Server Network Interface",
        "arcgis-deployment-id": "[variables('deploymentId')]",
        "arcgis-federated-deployment-id": "[parameters('federatedSiteDeploymentId')]"
      },
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig",
            "properties": {
              "privateIPAllocationMethod": "Dynamic",
              "subnet": {
                "id": "[variables('subnetRef')]"
              }
            }
          }
        ]
      }
    },
    {
      "condition": "[equals(string(parameters('databaseOption')), 'SQLServerDatabase')]",
      "apiVersion": "[variables('computeApiVersion')]",
      "type": "Microsoft.Compute/virtualMachines",
      "name": "[variables('databaseServerHostName')[parameters('databaseOption')]]",
      "location": "[parameters('location')]",
      "identity": "[if(empty(parameters('userAssignedIdentities')),json('null'),variables('userAssignedIdentities'))]",
      "tags": {
        "arcgis-vm-roles": "SQLServer",
        "arcgis-deployment-id": "[variables('deploymentId')]",
        "displayName": "(Optional) SQL Server Virtual Machine",
        "arcgis-federated-deployment-id": "[parameters('federatedSiteDeploymentId')]"
      },
      "dependsOn": [
        "[concat('Microsoft.Network/networkInterfaces/', parameters('databaseServerHostName'), '-', variables('nicName'))]"
      ],
      "properties": {
        "hardwareProfile": {
          "vmSize": "[parameters('sqlServerVirtualMachineSize')]"
        },
        "osProfile": {
          "computername": "[parameters('databaseServerHostName')]",
          "adminUsername": "[if(empty(parameters('adminUsername')),parameters('databaseServerAdministratorAccountUserName'), parameters('adminUsername'))]",
          "adminPassword": "[if(empty(parameters('adminPassword')),parameters('databaseServerAdministratorAccountPassword'), parameters('adminPassword'))]",
          "windowsConfiguration": {
            "enableAutomaticUpdates": "[parameters('enableAutomaticUpdates')]",
            "timeZone": "[parameters('timeZoneId')]"
          }
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "MicrosoftSQLServer",
            "offer": "[parameters('sqlServerImageOffer')]",
            "sku": "[parameters('sqlServerImageSku')]",
            "version": "latest"
          },
          "osDisk": {
            "name": "[concat(parameters('databaseServerHostName'),'-','OSDisk')]",
            "managedDisk": {
              "storageAccountType": "[parameters('sqlServerVirtualMachineOSDiskType')]"
            },
            "diskSizeGB": "[parameters('sqlServerVirtualMachineOSDiskSize')]",
            "caching": "ReadWrite",
            "createOption": "FromImage"
          }
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces/', concat(parameters('databaseServerHostName'), '-',variables('nicName')))]"
            }
          ]
        }
      }
    },
    {
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "condition": "[and(and(not(empty(parameters('omsWorkspaceResourceGroupName'))),not(empty(parameters('omsWorkspaceName')))),equals(string(parameters('databaseOption')), 'SQLServerDatabase'))]",
      "name": "[concat(variables('databaseServerHostName')[parameters('databaseOption')],'/LogAnalytics')]",
      "apiVersion": "2015-05-01-preview",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[concat('Microsoft.Compute/virtualMachines/', variables('databaseServerHostName')[parameters('databaseOption')])]"
      ],
      "properties": {
        "publisher": "Microsoft.EnterpriseCloud.Monitoring",
        "type": "MicrosoftMonitoringAgent",
        "typeHandlerVersion": "1.0",
        "autoUpgradeMinorVersion": true,
        "settings": {
          "workspaceId": "[if(not(empty(variables('omsWorkspaceResourceId'))),reference(variables('omsWorkspaceResourceId'),'2015-11-01-preview').customerId ,json('null'))]"
        },
        "protectedSettings": {
          "workspaceKey": "[if(not(empty(variables('omsWorkspaceResourceId'))),listKeys(variables('omsWorkspaceResourceId'),'2015-11-01-preview').primarySharedKey ,json('null'))]"
        }
      }
    },
    {
      "condition": "[equals(string(parameters('databaseOption')), 'SQLServerDatabase')]",
      "name": "[concat(variables('databaseServerHostName')[parameters('databaseOption')],'/DSCConfiguration')]",
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "location": "[parameters('location')]",
      "tags": {
        "displayName": "(Optional) SQL Server DSC Scripts"
      },
      "dependsOn": [
        "[variables('databaseServerHostName')[parameters('databaseOption')]]",
        "[concat(resourceId('Microsoft.Compute/VirtualMachines', variables('databaseServerHostName')[parameters('databaseOption')]),'/extensions/JoinDomain')]"
      ],
      "apiVersion": "[variables('computeApiVersion')]",
      "properties": {
        "publisher": "Microsoft.Powershell",
        "type": "DSC",
        "typeHandlerVersion": "2.77",
        "autoUpgradeMinorVersion": true,
        "settings": {
          "wmfVersion": "latest",
          "configuration": {
            "url": "[concat(parameters('_artifactsLocation'), '/', variables('dscExtensionArchiveFileName'))]",
            "function": "[variables('sqlServerDscScriptFunction')]",
            "script": "[concat(variables('sqlServerDscScriptFunction'), '.ps1')]"
          },
          "configurationArguments": {
          }
        },
        "protectedSettings": {
          "configurationUrlSasToken": "[parameters('_artifactsLocationSasToken')]",
          "configurationArguments": {
            "DatabaseAdminCredential": {
              "userName": "[variables('databaseServerAdministratorAccountUserName')[string(equals(parameters('databaseOption'), 'None'))]]",
              "password": "[variables('databaseServerAdministratorAccountPassword')[string(equals(parameters('databaseOption'), 'None'))]]"
            }
          }
        }
      }
    },
    {
      "condition": "[and(equals(string(parameters('databaseOption')), 'SQLServerDatabase'), equals(string(parameters('enableAutoShutDown')), 'True'))]",
      "apiVersion": "2018-09-15",
      "type": "Microsoft.DevTestLab/schedules",
      "name": "[concat('shutdown-computevm-', variables('databaseServerHostName')[parameters('databaseOption')])]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[variables('databaseServerHostName')[parameters('databaseOption')]]"
      ],
      "properties": {
        "status": "[if(parameters('enableAutoShutDown'),'Enabled','Disabled')]",
        "timeZoneId": "[parameters('timeZoneId')]",
        "taskType": "ComputeVmShutdownTask",
        "notificationSettings": {
          "status": "Disabled",
          "timeInMinutes": 15,
          "webhookUrl": ""
        },
        "targetResourceId": "[resourceId('Microsoft.Compute/virtualMachines/', variables('databaseServerHostName')[parameters('databaseOption')])]",
        "dailyRecurrence": {
          "time": "[parameters('autoShutDownTime')]"
        }
      }
    },
    {
      "condition": "[and(equals(string(parameters('databaseOption')), 'SQLServerDatabase'), equals(string(parameters('joinWindowsDomain')), 'True'))]",
      "apiVersion": "[variables('computeApiVersion')]",
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "name": "[concat(variables('databaseServerHostName')[parameters('databaseOption')],'/JoinDomain')]",
      "location": "[parameters('location')]",
      "tags": {
        "displayName": "(Optional) SQL Server Domain Join"
      },
      "dependsOn": [
        "[variables('databaseServerHostName')[parameters('databaseOption')]]"
      ],
      "properties": {
        "publisher": "Microsoft.Compute",
        "type": "JsonADDomainExtension",
        "typeHandlerVersion": "1.3",
        "autoUpgradeMinorVersion": true,
        "settings": {
          "Name": "[parameters('windowsDomainName')]",
          "User": "[parameters('windowsDomainAdministratorUserName')]",
          "Restart": "true",
          "Options": 3
        },
        "protectedSettings": {
          "Password": "[parameters('windowsDomainAdministratorPassword')]"
        }
      }
    }
  ],
  "outputs": {
    "serverManagerUrl": {
      "type": "string",
      "value": "[concat('https://', parameters('externalDnsHostName'), '/',parameters('serverContext'),'/manager/')]"
    }
  }
}